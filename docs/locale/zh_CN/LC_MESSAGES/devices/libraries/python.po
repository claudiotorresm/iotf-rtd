# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-06-15 21:50-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/devices/libraries/python.rst:2
msgid "Python for Device Developers"
msgstr ""
"针对设备开发者的 Python"

#: ../docs/devices/libraries/python.rst:4
msgid "See `iot-python <https://github.com/ibm-messaging/iot-python>`_ in GitHub"
msgstr ""
"请参阅 GitHub 中的 `iot-python <https://github.com/ibm-messaging/iot-python>`_"

#: ../docs/devices/libraries/python.rst:5
msgid "See `ibmiotf <https://pypi.python.org/pypi/ibmiotf>`_ on PyPi"
msgstr ""
"请参阅 PyPi 上的 `ibmiotf <https://pypi.python.org/pypi/ibmiotf>`_"

#: ../docs/devices/libraries/python.rst:10
msgid "Constructor"
msgstr ""
"构造方法"

#: ../docs/devices/libraries/python.rst:12
msgid "The constructor builds the client instance, and accepts an options dict containing the following definitions:"
msgstr ""
"此构造方法用于构建客户机实例，并接受包含以下定义的选项字典："

#: ../docs/devices/libraries/python.rst:14
msgid "``org`` - Your organization ID."
msgstr ""
"“org”- 贵组织的标识。"

#: ../docs/devices/libraries/python.rst:15
msgid "``type`` - The type of your device."
msgstr ""
"“type”- 设备的类型。"

#: ../docs/devices/libraries/python.rst:16
msgid "``id`` - The ID of your device."
msgstr ""
"“id”- 设备的标识。"

#: ../docs/devices/libraries/python.rst:17
msgid "``auth-method`` - Method of authentication (the only value currently supported is ``token``)."
msgstr ""
"“auth-method”- 认证方法（当前唯一支持的值为“token”）。"

#: ../docs/devices/libraries/python.rst:18
msgid "``auth-token`` - API key token (required if auth-method is ``token``)."
msgstr ""
"“auth-token”- API 密钥令牌（如果 auth-method 为“token”，那么此项为必需项）。"

#: ../docs/devices/libraries/python.rst:20
msgid "If no options dict is provided, the client will connect to the IoT Platform Quickstart, and default to an unregistered device. The options dict creates definitions which are used to interact with the IoT Platform module."
msgstr ""
"如果不提供选项 dict，那么客户机将连接到 IoT Platform Quickstart，并缺省设置为未注册的设备。选项 dict 可创建用于与 IoT Platform 模块进行交互的定义。"

#: ../docs/devices/libraries/python.rst:39
msgid "Using a configuration file"
msgstr ""
"使用配置文件"

#: ../docs/devices/libraries/python.rst:41
msgid "Instead of including an options dict directly, you can use a configuration file containing an options dict. If you are using a configuration file containing an options dict, use the following code format."
msgstr ""
"您可以使用包含选项字典的配置文件，而不是直接包含选项字典。如果使用的配置文件包含选项字典，请使用以下代码格式。"

#: ../docs/devices/libraries/python.rst:52
msgid "The content of the configuration file must be in the following format(need not contain **$** sign):"
msgstr ""
"配置文件的内容必须为以下格式（无需包含 **$** 符号）："

#: ../docs/devices/libraries/python.rst:68
msgid "Publishing events"
msgstr ""
"发布事件"

#: ../docs/devices/libraries/python.rst:69
msgid "Events are the mechanism by which devices publish data to the IoT Platform. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"事件是设备用于将数据发布到 IoT Platform 的机制。设备控制事件的内容，并为其发送的每个事件分配名称。"

#: ../docs/devices/libraries/python.rst:71
msgid "When an event is received by the IoT Platform the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""
"IoT Platform 接收到事件时，将使用用于接收该事件的连接的凭证来确定是从哪个设备发送了该事件。由于使用这种体系结构，设备将无法模拟其他设备。"

#: ../docs/devices/libraries/python.rst:73
msgid "Events can be published at any of the three :ref:`quality of service levels <qoslevels>` defined by the MQTT protocol.  By default events will be published as qos level 0."
msgstr ""
"可以按 MQTT 协议定义的三个 :ref:`服务质量级别 <qoslevels>` 中的任何一个级别发布事件。缺省情况下，将按 qos 级别 0 发布事件。"

#: ../docs/devices/libraries/python.rst:76
msgid "Publish event using default quality of service"
msgstr ""
"使用缺省服务质量发布事件"

#: ../docs/devices/libraries/python.rst:85
msgid "Publish event using user-defined quality of service"
msgstr ""
"使用用户定义的服务质量发布事件"

#: ../docs/devices/libraries/python.rst:87
msgid "Events can be published at higher MQTT quality of servive levels, but these events may take slower then QoS level 0, because of the extra confirmation of receipt."
msgstr ""
"可通过较高的 MQTT 服务质量级别发布事件，但由于需要额外的接收确认，这些事件可能采用慢于 QoS 级别 0 的级别。"

#: ../docs/devices/libraries/python.rst:99
msgid "Handling commands"
msgstr ""
"处理命令"

#: ../docs/devices/libraries/python.rst:100
msgid "When the device client connects it automatically subscribes to any command for this device.  To process specific commands you need to register a command callback method. The messages are returned as an instance of the Command class which has the following properties:"
msgstr ""
"设备客户机连接时，会自动预订此设备的任何命令。要处理特定命令，需要注册命令回调方法。消息将作为 Command 类的实例返回，具有以下属性："

#: ../docs/devices/libraries/python.rst:105
msgid "command - string"
msgstr ""
"command - 字符串"

#: ../docs/devices/libraries/python.rst:106
msgid "format - string"
msgstr ""
"format - 字符串"

#: ../docs/devices/libraries/python.rst:107
msgid "data - dict"
msgstr ""
"data - 字典"

#: ../docs/devices/libraries/python.rst:108
msgid "timestamp - datetime"
msgstr ""
"timestamp - 日期时间"

#: ../docs/devices/libraries/python.rst:136
msgid "Custom message format support"
msgstr ""
"定制消息格式支持"

#: ../docs/devices/libraries/python.rst:137
msgid "By default the library supports the encoding and decoding of Python dictionary objects as JSON when you use msgFormat \"json\".  When you use msgFormat \"json-iotf\" it will encode the message in accordance with the IoT Platform JSON Payload Specification.  To add support for your own custom message formats see the `sample in GitHub <https://github.com/ibm-messaging/iot-python/tree/master/samples/customMessageFormat>`__"
msgstr ""
"默认情况下，在使用 msgFormat“json”时，库支持作为 JSON 编码和解码 Python 字典。在使用 msgFormat“json-iotf”时，将依据 IoT Platform JSON 有效内容规范对消息进行编码。要针对自己的定制消息添加支持，请参阅 `GitHub 中的样本 <https://github.com/ibm-messaging/iot-python/tree/master/samples/customMessageFormat>`__"

#: ../docs/devices/libraries/python.rst:139
msgid "Once you have created your custom encoder module it needs to be registered in the device client.  If you attempt to use an unknown message format when sending an event or the device receives a command send in a format that it does not know how to decode then the library will throw a MissingMessageDecoderException."
msgstr ""
"创建定制编码器模块后，需要在设备客户机中进行注册。如果发送事件时尝试使用未知消息格式，或设备接收的命令是以其不知道如何解码的格式发送的，那么库将抛出 MissingMessageDecoderException。"

