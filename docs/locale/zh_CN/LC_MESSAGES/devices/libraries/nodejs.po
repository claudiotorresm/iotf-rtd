# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-06-15 21:50-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/devices/libraries/nodejs.rst:2
msgid "Node.js for Device Developers"
msgstr ""
"针对设备开发者的 Node.js"

#: ../docs/devices/libraries/nodejs.rst:4
msgid "See `iot-nodejs <https://github.com/ibm-messaging/iot-nodejs>`_ in GitHub"
msgstr ""
"请参阅 GitHub 中的 `iot-nodejs <https://github.com/ibm-messaging/iot-nodejs>`_"

#: ../docs/devices/libraries/nodejs.rst:5
msgid "See the `samples for device <https://github.com/ibm-messaging/iot-nodejs/tree/master/samples>`_ in Github"
msgstr ""
"请参阅 Github 中的 `设备样本 <https://github.com/ibm-messaging/iot-nodejs/tree/master/samples>`_"

#: ../docs/devices/libraries/nodejs.rst:6
msgid "See `ibmiotf <https://www.npmjs.com/package/ibmiotf>`_ on NPM"
msgstr ""
"请参阅 NPM 上的 `ibmiotf <https://www.npmjs.com/package/ibmiotf>`_"

#: ../docs/devices/libraries/nodejs.rst:9
msgid "Constructor"
msgstr ""
"构造方法"

#: ../docs/devices/libraries/nodejs.rst:11
msgid "The constructor builds the device client instance. It accepts a configuration json containing the following definitions:"
msgstr ""
"此构造方法用于构建设备客户机实例。它接受包含以下定义的配置 json："

#: ../docs/devices/libraries/nodejs.rst:13
msgid "``org`` - Your organization ID"
msgstr ""
"“org”- 贵组织的标识"

#: ../docs/devices/libraries/nodejs.rst:14
msgid "``type`` - The type of your device"
msgstr ""
"“type”- 设备的类型"

#: ../docs/devices/libraries/nodejs.rst:15
msgid "``id`` - The ID of your device"
msgstr ""
"“id”- 设备的标识"

#: ../docs/devices/libraries/nodejs.rst:16
msgid "``auth-method`` - Method of authentication (the only value currently supported is ``token``)"
msgstr ""
"“auth-method”- 认证方法（当前唯一支持的值为“token”）"

#: ../docs/devices/libraries/nodejs.rst:17
msgid "``auth-token`` - API key token (required if auth-method is ``token``)"
msgstr ""
"“auth-token”- API 密钥令牌（如果 auth-method 为“token”，那么此项为必需项）"

#: ../docs/devices/libraries/nodejs.rst:19
msgid "If you want to use Quickstart, then send only the first three properties."
msgstr ""
"如果想要使用 Quickstart，只需发送前三个属性。"

#: ../docs/devices/libraries/nodejs.rst:36
msgid "Using a configuration file"
msgstr ""
"使用配置文件"

#: ../docs/devices/libraries/nodejs.rst:38
msgid "Instead of passing the configuration json directly, you can also use a configuration json file. Use the following code snippet:"
msgstr ""
"除了直接传递配置 json 之外，您还可以使用配置 json 文件。请使用以下代码片段："

#: ../docs/devices/libraries/nodejs.rst:46
msgid "The configuration file `device.json` must be in the format of"
msgstr ""
"配置文件  `device.json` 必须为以下格式"

#: ../docs/devices/libraries/nodejs.rst:59
msgid "Connecting to the IoT Platform"
msgstr ""
"连接到 IoT Platform"

#: ../docs/devices/libraries/nodejs.rst:61
msgid "Connect to the IoT Platform by calling the *connect* function."
msgstr ""
"通过调用 *connect* 函数来连接到 IoT Platform。"

#: ../docs/devices/libraries/nodejs.rst:84
msgid "After the successful connection to the IoT Platform service, the device client sends a *connect* event. So all the device logic can be implemented inside this callback function."
msgstr ""
"成功连接到 IoT Platform 服务后，设备客户机将发送 *connect* 事件。因此，可以在此回调函数内实现所有设备逻辑。"

#: ../docs/devices/libraries/nodejs.rst:86
msgid "The Device Client automatically tries to reconnect when it loses connection. When the reconnection is successful, the client emits *reconnect* event."
msgstr ""
"设备客户机在失去连接时会自动尝试重新连接。当重新连接成功时，客户机将发出 *reconnect* 事件。"

#: ../docs/devices/libraries/nodejs.rst:89
msgid "Logging"
msgstr ""
"日志记录"

#: ../docs/devices/libraries/nodejs.rst:91
msgid "By default, all the logs of ``warn`` are logged. If you want to enable more logs, use the *log.setLevel* function. Supported log levels - *trace, debug, info, warn, error*."
msgstr ""
"缺省情况下，将记录所有“warn”日志。如果想要启用更多日志，请使用 *log.setLevel* 函数。支持的日志级别 - *trace、debug、info、warn 和 error*。"

#: ../docs/devices/libraries/nodejs.rst:107
msgid "Publishing events"
msgstr ""
"发布事件"

#: ../docs/devices/libraries/nodejs.rst:109
msgid "Events are the mechanism by which devices publish data to the IoT Platform. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"事件是设备用于将数据发布到 IoT Platform 的机制。设备控制事件的内容，并为其发送的每个事件分配名称。"

#: ../docs/devices/libraries/nodejs.rst:111
msgid "When an event is received by the IoT Platform the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""
"IoT Platform 接收到事件时，将使用用于接收该事件的连接的凭证来确定是从哪个设备发送了该事件。由于使用这种体系结构，设备将无法模拟其他设备。"

#: ../docs/devices/libraries/nodejs.rst:113
msgid "Events can be published at any of the three quality of service levels defined by the MQTT protocol. By default events will be published as QoS level 0. Please not that if you are using the Internet of Things Quickstart service, events can only be published at QoS level 0."
msgstr ""
"可以按 MQTT 协议定义的三个服务质量级别中的任何一个级别发布事件。缺省情况下，将按 QoS 级别 0 发布事件。请注意，如果您正在使用 Internet of Things Quickstart 服务，那么只能按 QoS 级别 0 发布事件。"

#: ../docs/devices/libraries/nodejs.rst:115
msgid "Events can be published by using:"
msgstr ""
"可以通过使用以下项来发布事件："

#: ../docs/devices/libraries/nodejs.rst:118
msgid "eventType - Type of event to be published e.g status, gps."
msgstr ""
"eventType - 要发布的事件的类型（如 status 和 gps）。"

#: ../docs/devices/libraries/nodejs.rst:119
msgid "eventFormat - Format of the event e.g json."
msgstr ""
"eventFormat - 事件的格式（如 json）。"

#: ../docs/devices/libraries/nodejs.rst:120
msgid "data - Payload of the event.(Must be buffer/String)"
msgstr ""
"data - 事件的有效内容（必须是 buffer/String）。"

#: ../docs/devices/libraries/nodejs.rst:121
msgid "QoS - MQTT quality of service for the publish event. Supported values : 0,1,2."
msgstr ""
"QoS - 发布事件的 MQTT 服务质量。支持的值包括：0、1 和 2。"

#: ../docs/devices/libraries/nodejs.rst:139
msgid "Handling commands"
msgstr ""
"处理命令"

#: ../docs/devices/libraries/nodejs.rst:141
msgid "When the device client connects, it automatically subscribes to any command for this device. To process specific commands you need to register a command callback function. The device client sends *command* when a command is received. The callback function has the following properties."
msgstr ""
"设备客户机连接时，会自动预订此设备的任何命令。要处理特定命令，需要注册命令回调函数。设备客户机会在收到命令时发送 *command*。该回调函数具有以下属性。"

#: ../docs/devices/libraries/nodejs.rst:143
msgid "commandName - name of the command invoked"
msgstr ""
"commandName - 所调用命令的名称"

#: ../docs/devices/libraries/nodejs.rst:144
msgid "format - e.g json, xml"
msgstr ""
"format - 例如，json 和 xml"

#: ../docs/devices/libraries/nodejs.rst:145
msgid "payload - payload for the command"
msgstr ""
"payload - 命令的有效内容"

#: ../docs/devices/libraries/nodejs.rst:146
msgid "topic - actual topic where the command was received"
msgstr ""
"topic - 收到此命令的实际主题"

#: ../docs/devices/libraries/nodejs.rst:171
msgid "Handling errors"
msgstr ""
"处理错误"

#: ../docs/devices/libraries/nodejs.rst:173
msgid "When the device clients encounters an error, it emits an *error* event."
msgstr ""
"当设备客户机遇到错误时，将发出 *error* 事件。"

#: ../docs/devices/libraries/nodejs.rst:194
msgid "Disconnect Client"
msgstr ""
"断开客户机连接"

#: ../docs/devices/libraries/nodejs.rst:196
msgid "Disconnects the client and releases the connections"
msgstr ""
"断开与客户机的连接并释放连接"

