# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-06-15 21:50-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/devices/libraries/java_deviceManagement.rst:3
msgid "Java Client Library - Managed Devices"
msgstr ""
"Java 客户机库 - 受管设备"

#: ../docs/devices/libraries/java_deviceManagement.rst:6
msgid "Introduction"
msgstr ""
"简介"

#: ../docs/devices/libraries/java_deviceManagement.rst:8
msgid "This client library describes how to use devices with the Java ibmiotf client library. For help with getting started with this module, see `Java Client Library - Introduction <../java/javaintro.html>`__."
msgstr ""
"此客户机库描述了如何将设备与 Java ibmiotf 客户机库配合使用。有关如何开始使用此模块的帮助，请参阅 `Java 客户机库 - 简介 <../java/javaintro.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:10
msgid "This section contains information on how devices can  to the IoT Platform Device Management service using Java and perform device management operations like firmware update, location update, and diagnostics update."
msgstr ""
"本部分包含的信息涉及设备如何使用 Java 连接到“IoT Platform 设备管理”服务，以及设备如何执行设备管理操作，如固件更新、位置更新和诊断更新。"

#: ../docs/devices/libraries/java_deviceManagement.rst:12
msgid "The Device section contains information on how devices can publish events and handle commands using the Java ibmiotf Client Library."
msgstr ""
"“设备”部分包含有关设备如何使用 Java ibmiotf 客户机库发布事件和处理命令的信息。"

#: ../docs/devices/libraries/java_deviceManagement.rst:14
msgid "The Applications section contains information on how applications can use the Java ibmiotf Client Library to interact with devices."
msgstr ""
"“应用程序”部分包含有关应用程序可如何使用 Java ibmiotf 客户机库来与设备进行交互的信息。"

#: ../docs/devices/libraries/java_deviceManagement.rst:18
msgid "Device Management"
msgstr ""
"设备管理"

#: ../docs/devices/libraries/java_deviceManagement.rst:19
msgid "The `device management <../reference/device_mgmt.html>`__ feature enhances the IoT Platform service with new capabilities for managing devices. Device management makes a distinction between managed and unmanaged devices:"
msgstr ""
"`设备管理 <../reference/device_mgmt.html>`__ 功能通过新的设备管理功能增强了 IoT Platform 服务。设备管理可区分受管设备和非受管设备："

#: ../docs/devices/libraries/java_deviceManagement.rst:21
msgid "**Managed Devices** are defined as devices which have a management agent installed. The management agent sends and receives device metadata and responds to device management commands from the IoT Platform."
msgstr ""
"**Managed Devices** 定义为已安装管理代理程序的设备。管理代理程序可以与 IoT Platform 之间传输设备元数据，并响应来自 IoT Platform 的设备管理命令。"

#: ../docs/devices/libraries/java_deviceManagement.rst:22
msgid "**Unmanaged Devices** are any devices which do not have a device management agent. All devices begin their lifecycle as unmanaged devices, and can transition to managed devices by sending a message from a device management agent to the IoT Platform."
msgstr ""
"**非受管设备** 是没有安装设备管理代理程序的设备。所有设备在其生命周期开始时都是非受管设备，并可以通过设备管理代理程序将消息发送到 IoT Platform 来转换为受管设备。"

#: ../docs/devices/libraries/java_deviceManagement.rst:27
msgid "Connecting to the IoT Platform Device Management Service"
msgstr ""
"连接到“IoT Platform 设备管理”服务"

#: ../docs/devices/libraries/java_deviceManagement.rst:30
msgid "Create DeviceData"
msgstr ""
"创建 DeviceData"

#: ../docs/devices/libraries/java_deviceManagement.rst:31
msgid "The `device model <../reference/device_model.html>`__ describes the metadata and management characteristics of a device. The device database in the IoT Platform is the master source of device information. Applications and managed devices are able to send updates to the database such as a location or the progress of a firmware update. Once these updates are received by the IoT Platform, the device database is updated, making the information available to applications."
msgstr ""
"`设备模型 <../reference/device_model.html>`__ 描述设备的元数据和管理特征。IoT Platform 中的设备数据库是设备信息的主要来源。应用程序和受管设备可以向数据库发送更新（例如，位置或固件更新进度）。IoT Platform 收到这些更新后，设备数据库将进行更新，这样，应用程序便可以使用这些信息。"

#: ../docs/devices/libraries/java_deviceManagement.rst:33
msgid "The device model in the ibmiotf client library is represented as DeviceData and to create a DeviceData one needs to create the following objects,"
msgstr ""
"ibmiotf 客户机库中的设备模型以 DeviceData 表示，要创建 DeviceData，用户需要创建以下对象："

#: ../docs/devices/libraries/java_deviceManagement.rst:35
msgid "DeviceInfo (mandatory)"
msgstr ""
"DeviceInfo（必需）"

#: ../docs/devices/libraries/java_deviceManagement.rst:36
msgid "DeviceLocation (required if the device supports location update)"
msgstr ""
"DeviceLocation（如果设备支持位置更新，那么是必需的）"

#: ../docs/devices/libraries/java_deviceManagement.rst:37
msgid "DiagnosticErrorCode (required if the device wants to update the ErrorCode)"
msgstr ""
"DiagnosticErrorCode（如果希望设备更新 ErrorCode，那么是必需的）"

#: ../docs/devices/libraries/java_deviceManagement.rst:38
msgid "DiagnosticLog (required if the device wants to update Log information)"
msgstr ""
"DiagnosticLog（如果希望设备更新日志信息，那么是必需的）"

#: ../docs/devices/libraries/java_deviceManagement.rst:39
msgid "DeviceFirmware (required if the device supports Firmware Actions)"
msgstr ""
"DeviceFirmware（如果设备支持固件操作，那么是必需的）"

#: ../docs/devices/libraries/java_deviceManagement.rst:40
msgid "DeviceMetadata (optional)"
msgstr ""
"DeviceMetadata（可选)"

#: ../docs/devices/libraries/java_deviceManagement.rst:42
msgid "The following code snippet shows how to create the mandatory object DeviceInfo along with an optional object DeviceMetadata with sample data:"
msgstr ""
"以下代码片段显示如何使用样本数据创建必需对象 DeviceInfo 以及可选对象 DeviceMetadata："

#: ../docs/devices/libraries/java_deviceManagement.rst:64
msgid "The following code snippet shows how to create the DeviceData object with the above created DeviceInfo and DeviceMetadata objects:"
msgstr ""
"以下代码片段显示如何通过上面创建的 DeviceInfo 和 DeviceMetadata 对象来创建 DeviceData 对象："

#: ../docs/devices/libraries/java_deviceManagement.rst:73
msgid "Construct ManagedDevice"
msgstr ""
"构造 ManagedDevice"

#: ../docs/devices/libraries/java_deviceManagement.rst:74
msgid "ManagedDevice - A device class that connects the device as managed device to IoT Platform and enables the device to perform one or more Device Management operations. Also the ManagedDevice instance can be used to do normal device operations like publishing device events and listening for commands from application."
msgstr ""
"ManagedDevice - 一种设备类，可将设备作为受管设备连接到 IoT Platform，并且允许设备执行一个或多个“设备管理”操作。另外，ManagedDevice 实例还可用于执行常规设备操作，如发布设备事件和侦听应用程序发出的命令。"

#: ../docs/devices/libraries/java_deviceManagement.rst:76
msgid "ManagedDevice exposes 2 different constructors to support different user patterns,"
msgstr ""
"ManagedDevice 提供 2 种不同的构造方法，用于支持不同的用户模式："

#: ../docs/devices/libraries/java_deviceManagement.rst:78
msgid "**Constructor One**"
msgstr ""
"**构造方法 1**"

#: ../docs/devices/libraries/java_deviceManagement.rst:80
msgid "Constructs a ManagedDevice instance by accepting the DeviceData and the following properties,"
msgstr ""
"通过接受 DeviceData 和以下属性来构造 ManagedDevice 实例："

#: ../docs/devices/libraries/java_deviceManagement.rst:82
msgid "Organization-ID - Your organization ID."
msgstr ""
"Organization-ID - 贵组织的标识。"

#: ../docs/devices/libraries/java_deviceManagement.rst:83
msgid "Device-Type - The type of your device."
msgstr ""
"Device-Type - 设备的类型。"

#: ../docs/devices/libraries/java_deviceManagement.rst:84
msgid "Device-ID - The ID of your device."
msgstr ""
"Device-ID - 设备的标识。"

#: ../docs/devices/libraries/java_deviceManagement.rst:85
msgid "Authentication-Method - Method of authentication (The only value currently supported is \"token\")."
msgstr ""
"Authentication-Method - 认证方法（当前唯一支持的值为“token”）。"

#: ../docs/devices/libraries/java_deviceManagement.rst:86
msgid "Authentication-Token - API key token"
msgstr ""
"Authentication-Token - API 密钥令牌"

#: ../docs/devices/libraries/java_deviceManagement.rst:88
msgid "All these properties are required to interact with the IoT Platform."
msgstr ""
"所有这些属性都是与 IoT Platform 进行交互时所必需的。"

#: ../docs/devices/libraries/java_deviceManagement.rst:90
msgid "The following code shows how to create a ManagedDevice instance:"
msgstr ""
"以下代码显示如何创建 ManagedDevice 实例："

#: ../docs/devices/libraries/java_deviceManagement.rst:103
msgid "The existing users of DeviceClient might observe that the names of these properties have changed slightly. These names have been changed to mirror the names in the IoT Platform Dashboard, but the existing users who want to migrate from the DeviceClient to the ManagedDevice can still use the old format and construct the ManagedDevice instance as follows:"
msgstr ""
"DeviceClient 的现有用户可能会注意到这些属性的名称略有变化。更改这些名称是为了与“IoT Platform 仪表板”中的名称对应，但希望从 DeviceClient 迁移到 ManagedDevice 的现有用户仍可以使用原有格式并如下构造 ManagedDevice 实例："

#: ../docs/devices/libraries/java_deviceManagement.rst:115
msgid "**Constructor Two**"
msgstr ""
"**构造方法 2**"

#: ../docs/devices/libraries/java_deviceManagement.rst:117
msgid "Construct a ManagedDevice instance by accepting the DeviceData and the MqttClient instance. This constructor requires the DeviceData to be created with additional device attributes like Device Type and Device Id as follows:"
msgstr ""
"通过接受 DeviceData 和 MqttClient 实例来构造 ManagedDevice 实例。该构造方法要求使用其他设备属性（如设备类型和设备标识）来创建 DeviceData，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:135
msgid "Note this constructor helps the custom device users to create a ManagedDevice instance with the already created and connected MqttClient instance to take advantage of device management operations. But we recommend the users to use the library for all the device functionalities."
msgstr ""
"注意，该构造方法有助于定制设备用户使用已创建和已连接的 MqttClient 实例来创建 ManagedDevice 实例，以利用设备管理操作。但我们建议用户对所有设备功能均使用该库。"

#: ../docs/devices/libraries/java_deviceManagement.rst:138
msgid "Manage"
msgstr ""
"管理"

#: ../docs/devices/libraries/java_deviceManagement.rst:139
msgid "The device can invoke manage() method to participate in device management activities. The manage request will initiate a connect request internally if the device is not connected to the IoT Platform already:"
msgstr ""
"设备可通过调用 manage() 方法来参与设备管理活动。如果设备尚未连接到 IoT Platform，那么管理请求将在内部发出一个连接请求："

#: ../docs/devices/libraries/java_deviceManagement.rst:145
msgid "The device can use overloaded manage (lifetime) method to register the device for a given timeframe. The timeframe specifies the length of time within which the device must send another **Manage device** request in order to avoid being reverted to an unmanaged device and marked as dormant."
msgstr ""
"设备可以使用重载 manage (lifetime) 方法针对指定时间范围注册设备。该时间范围指定一个时间段，设备必须在该时间段内发送另一个**管理设备**请求，以便避免被还原为非受管设备且标记为停止。"

#: ../docs/devices/libraries/java_deviceManagement.rst:151
msgid "Refer to the `documentation <../device_mgmt/operations/manage.html>`__ for more information about the manage operation."
msgstr ""
"有关管理操作的更多信息，请参阅 `文档 <../device_mgmt/operations/manage.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:154
msgid "Unmanage"
msgstr ""
"取消管理"

#: ../docs/devices/libraries/java_deviceManagement.rst:156
msgid "A device can invoke unmanage() method when it no longer needs to be managed. The IoT Platform will no longer send new device management requests to this device and all device management requests from this device will be rejected other than a **Manage device** request."
msgstr ""
"当设备不再需要接受管理时，它可以调用 unmanage() 方法。IoT Platform 将不再向此设备发送新的设备管理请求，并且将拒绝来自此设备的所有设备管理请求（**管理设备** 请求除外）。"

#: ../docs/devices/libraries/java_deviceManagement.rst:162
msgid "Refer to the `documentation <../device_mgmt/operations/manage.html>`__ for more information about the Unmanage operation."
msgstr ""
"有关取消管理操作的更多信息，请参阅 `文档 <../device_mgmt/operations/manage.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:165
msgid "Location Update"
msgstr ""
"位置更新"

#: ../docs/devices/libraries/java_deviceManagement.rst:167
msgid "Devices that can determine their location can choose to notify the IoT Platform about location changes. In order to update the location, the device needs to create DeviceData instance with the DeviceLocation object first."
msgstr ""
"能确定自身位置的设备可以选择将位置变更信息通知给 IoT Platform。为了更新位置，设备需要首先通过 DeviceLocation 对象创建 DeviceData 实例。"

#: ../docs/devices/libraries/java_deviceManagement.rst:182
msgid "Once the device is connected to IoT Platform, the location can be updated by invoking the following method:"
msgstr ""
"设备连接到 IoT Platform 后，便可以通过调用以下方法来更新位置："

#: ../docs/devices/libraries/java_deviceManagement.rst:193
msgid "Later, any new location can be updated by changing the properties of the DeviceLocation object:"
msgstr ""
"之后，可以通过更改 DeviceLocation 对象的属性来更新任何新位置："

#: ../docs/devices/libraries/java_deviceManagement.rst:204
msgid "The update() method informs the IoT Platform about the new location."
msgstr ""
"update() 方法会向 IoT Platform 发送有关新位置的信息。"

#: ../docs/devices/libraries/java_deviceManagement.rst:206
msgid "Refer to the `documentation <../device_mgmt/operations/update.html>`__ for more information about the Location update."
msgstr ""
"有关位置更新的更多信息，请参阅 `文档 <../device_mgmt/operations/update.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:209
msgid "Append/Clear ErrorCodes"
msgstr ""
"附加/清除 ErrorCodes"

#: ../docs/devices/libraries/java_deviceManagement.rst:211
msgid "Devices can choose to notify the IoT Platform about changes in their error status. In order to send the ErrorCodes the device needs to construct a DiagnosticErrorCode object as follows:"
msgstr ""
"设备可以选择向 IoT Platform 通知错误状态的更改。为了发送 ErrorCodes，设备需要构造一个 DiagnosticErrorCode 对象，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:223
msgid "Once the device is connected to IoT Platform, the ErrorCode can be sent by calling the send() method as follows:"
msgstr ""
"设备连接到 IoT Platform 后，可通过调用 send() 方法发送 ErrorCode，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:229
msgid "Later, any new ErrorCodes can be easily added to the IoT Platform by calling the append method as follows:"
msgstr ""
"之后，可通过调用 append 方法将任何新的 ErrorCodes 轻松添加到 IoT Platform，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:240
msgid "Also, the ErrorCodes can be cleared from IoT Platform by calling the clear() method as follows:"
msgstr ""
"另外，可通过调用 clear() 方法从 IoT Platform 中清除 ErrorCodes，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:252
msgid "Append/Clear Log messages"
msgstr ""
"附加/清除日志消息"

#: ../docs/devices/libraries/java_deviceManagement.rst:253
msgid "Devices can choose to notify the IoT Platform about changes by adding a new log entry. Log entry includes a log messages, its timestamp and severity, as well as an optional base64-encoded binary diagnostic data. In order to send log messages, the device needs to construct a DiagnosticLog object as follows:"
msgstr ""
"设备可以通过添加新日志条目向 IoT Platform 通知相关更改。日志条目包括日志消息、消息的时间戳记和严重性，以及采用 base64 编码的二进制诊断数据（可选）。为了发送日志消息，设备需要构造一个 DiagnosticLog 对象，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:268
msgid "Once the device is connected to IoT Platform, the log message can be sent by calling the send() method as follows:"
msgstr ""
"设备连接到 IoT Platform 后，可通过调用 send() 方法发送日志消息，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:274
msgid "Later, any new log messages can be easily added to the IoT Platform by calling the append method as follows:"
msgstr ""
"之后，可通过调用 append 方法将任何新的日志消息轻松添加到 IoT Platform，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:286
msgid "Also, the log messages can be cleared from IoT Platform by calling the clear method as follows:"
msgstr ""
"另外，可通过调用 clear 方法从 IoT Platform 中清除日志消息，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:297
msgid "The device diagnostics operations are intended to provide information on device errors, and does not provide diagnostic information relating to the devices connection to the IoT Platform."
msgstr ""
"设备诊断操作用于提供有关设备错误的信息，而不提供与 IoT Platform 的设备连接相关的诊断信息。"

#: ../docs/devices/libraries/java_deviceManagement.rst:299
msgid "Refer to the `documentation <../device_mgmt/operations/diagnostics.html>`__ for more information about the Diagnostics operation."
msgstr ""
"有关诊断操作的更多信息，请参阅 `文档 <../device_mgmt/operations/diagnostics.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:302
msgid "Firmware Actions"
msgstr ""
"固件操作"

#: ../docs/devices/libraries/java_deviceManagement.rst:303
msgid "The firmware update process is separated into two distinct actions:"
msgstr ""
"固件更新过程分为以下两个不同的操作："

#: ../docs/devices/libraries/java_deviceManagement.rst:305
msgid "Downloading Firmware"
msgstr ""
"下载固件"

#: ../docs/devices/libraries/java_deviceManagement.rst:306
msgid "Updating Firmware."
msgstr ""
"更新固件"

#: ../docs/devices/libraries/java_deviceManagement.rst:308
msgid "The device needs to do the following activities to support Firmware Actions:"
msgstr ""
"设备需要完成以下活动来支持这些固件操作："

#: ../docs/devices/libraries/java_deviceManagement.rst:310
msgid "**1. Construct DeviceFirmware Object**"
msgstr ""
"**1. 构造 DeviceFirmware 对象**"

#: ../docs/devices/libraries/java_deviceManagement.rst:312
msgid "In order to perform Firmware actions the device needs to construct the DeviceFirmware object and add it to DeviceData as follows:"
msgstr ""
"为了执行固件操作，设备需要构造 DeviceFirmware 对象并将其添加到 DeviceData，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:334
msgid "The DeviceFirmware object represents the current firmware of the device and will be used to report the status of the Firmware Download and Firmware Update actions to IoT Platform."
msgstr ""
"DeviceFirmware 对象表示设备的当前固件，并且用于向 IoT Platform 报告“固件下载”和“固件更新”操作的状态。"

#: ../docs/devices/libraries/java_deviceManagement.rst:336
msgid "**2. Inform the server about the Firmware action support**"
msgstr ""
"**2. 向服务器发送有关固件操作支持的信息**"

#: ../docs/devices/libraries/java_deviceManagement.rst:338
msgid "The device needs to set the firmware action flag to true in order for the server to initiate the firmware request. This can be achieved by invoking a following method with a boolean value:"
msgstr ""
"设备需要将固件操作标记设置为 true，以便服务器发出固件请求。可通过调用以下具有布尔值的方法来实现："

#: ../docs/devices/libraries/java_deviceManagement.rst:345
msgid "As the manage request informs the IoT Platform about the firmware action support, manage() method needs to be called right after setting the firmware action support."
msgstr ""
"在管理请求向 IoT Platform 发送有关固件操作支持的信息时，需要在设置固件操作支持后立即调用 manage() 方法。"

#: ../docs/devices/libraries/java_deviceManagement.rst:347
msgid "**3. Create the Firmware Action Handler**"
msgstr ""
"**3. 创建固件操作处理程序**"

#: ../docs/devices/libraries/java_deviceManagement.rst:349
msgid "In order to support the Firmware action, the device needs to create a handler and add it to ManagedDevice. The handler must extend a DeviceFirmwareHandler class and implement the following methods:"
msgstr ""
"为了支持固件操作，设备需要创建一个处理程序并将其添加到 ManagedDevice。该处理程序必须扩展 DeviceFirmwareHandler 类并实现以下方法："

#: ../docs/devices/libraries/java_deviceManagement.rst:356
msgid "**3.1 Sample implementation of downloadFirmware**"
msgstr ""
"**3.1 downloadFirmware 的样本实现**"

#: ../docs/devices/libraries/java_deviceManagement.rst:358
msgid "The implementation must add logic to download the firmware and report the status of the download via DeviceFirmware object. If the Firmware Download operation is successful, then the state of the firmware to be set to DOWNLOADED and UpdateStatus should be set to SUCCESS."
msgstr ""
"该实现必须添加用于下载固件的逻辑，并且通过 DeviceFirmware 对象报告下载的状态。如果“固件下载”操作成功，那么固件的状态将会设置为 DOWNLOADED，UpdateStatus 应设置为 SUCCESS。"

#: ../docs/devices/libraries/java_deviceManagement.rst:360
msgid "If an error occurs during Firmware Download the state should be set to IDLE and updateStatus should be set to one of the error status values:"
msgstr ""
"如果“固件下载”期间出错，那么 state 应当设置为 IDLE，updateStatus 应当设置为以下某个错误状态值："

#: ../docs/devices/libraries/java_deviceManagement.rst:362
#: ../docs/devices/libraries/java_deviceManagement.rst:460
msgid "OUT_OF_MEMORY"
msgstr ""
"OUT_OF_MEMORY"

#: ../docs/devices/libraries/java_deviceManagement.rst:363
msgid "CONNECTION_LOST"
msgstr ""
"CONNECTION_LOST"

#: ../docs/devices/libraries/java_deviceManagement.rst:364
msgid "INVALID_URI"
msgstr ""
"INVALID_URI"

#: ../docs/devices/libraries/java_deviceManagement.rst:366
msgid "A sample Firmware Download implementation for a Raspberry Pi device is shown below:"
msgstr ""
"下面显示了用于 Raspberry Pi 设备的样本“固件下载”实现："

#: ../docs/devices/libraries/java_deviceManagement.rst:425
msgid "Device can check the integrity of the downloaded firmware image using the verifier and report the status back to IoT Platform. The verifier can be set by the device during the startup (while creating the DeviceFirmware Object) or as part of the Download Firmware request by the application. A sample code to verify the same is below:"
msgstr ""
"设备可使用验证器检查已下载固件映像的完整性，并将状态报告给 IoT Platform。验证器可由设备在启动期间（创建 DeviceFirmware 对象时）设置，也可以作为“下载固件”请求的组成部分由应用程序设置。用于验证是否一致的样本代码如下："

#: ../docs/devices/libraries/java_deviceManagement.rst:452
#: ../docs/devices/libraries/java_deviceManagement.rst:496
msgid "The complete code can be found in the device management sample `RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__."
msgstr ""
"完整的代码可在设备管理样本 `RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__中找到。"

#: ../docs/devices/libraries/java_deviceManagement.rst:454
msgid "**3.2 Sample implementation of updateFirmware**"
msgstr ""
"**3.2 updateFirmware 的样本实现**"

#: ../docs/devices/libraries/java_deviceManagement.rst:456
msgid "The implementation must add logic to install the downloaded firmware and report the status of the update via DeviceFirmware object. If the Firmware Update operation is successful, then the state of the firmware should to be set to IDLE and UpdateStatus should be set to SUCCESS."
msgstr ""
"该实现必须添加用于安装已下载固件的逻辑，并且通过 DeviceFirmware 对象报告更新的状态。如果“固件更新”操作成功，那么固件的状态应当设置为 IDLE，UpdateStatus 应当设置为 SUCCESS。"

#: ../docs/devices/libraries/java_deviceManagement.rst:458
msgid "If an error occurs during Firmware Update, updateStatus should be set to one of the error status values:"
msgstr ""
"如果“固件更新”期间出错，那么 updateStatus 应当设置为以下某个错误状态值："

#: ../docs/devices/libraries/java_deviceManagement.rst:461
msgid "UNSUPPORTED_IMAGE"
msgstr ""
"UNSUPPORTED_IMAGE"

#: ../docs/devices/libraries/java_deviceManagement.rst:463
msgid "A sample Firmware Update implementation for a Raspberry Pi device is shown below:"
msgstr ""
"Raspberry Pi 设备的样本“固件更新”实现如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:498
msgid "**4. Add the handler to ManagedDevice**"
msgstr ""
"**4. 向 ManagedDevice 添加处理程序**"

#: ../docs/devices/libraries/java_deviceManagement.rst:500
msgid "The created handler needs to be added to the ManagedDevice instance so that the ibmiotf client library invokes the corresponding method when there is a Firmware action request from IoT Platform."
msgstr ""
"已创建的处理程序需要添加到 ManagedDevice 实例，以便在收到来自 IoT Platform 的固件操作请求时 ibmiotf 客户机库会调用相应的方法。"

#: ../docs/devices/libraries/java_deviceManagement.rst:507
msgid "Refer to `this page <../device_mgmt/operations/firmware_actions.html>`__ for more information about the Firmware action."
msgstr ""
"有关固件操作的更多信息，请参阅 `本页面 <../device_mgmt/operations/firmware_actions.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:510
msgid "Device Actions"
msgstr ""
"设备操作"

#: ../docs/devices/libraries/java_deviceManagement.rst:511
msgid "The IoT Platform supports the following device actions:"
msgstr ""
"IoT Platform 支持以下设备操作："

#: ../docs/devices/libraries/java_deviceManagement.rst:513
msgid "Reboot"
msgstr ""
"重新引导"

#: ../docs/devices/libraries/java_deviceManagement.rst:514
msgid "Factory Reset"
msgstr ""
"恢复工厂设置"

#: ../docs/devices/libraries/java_deviceManagement.rst:516
msgid "The device needs to do the following activities to support Device Actions:"
msgstr ""
"设备需要完成以下活动来支持设备操作："

#: ../docs/devices/libraries/java_deviceManagement.rst:518
msgid "**1. Inform server about the Device Actions support**"
msgstr ""
"**1. 向服务器发送有关设备操作支持的信息**"

#: ../docs/devices/libraries/java_deviceManagement.rst:520
msgid "In order to perform Reboot and Factory Reset, the device needs to inform the IoT Platform about its support first. This can achieved by invoking a following method with a boolean value:"
msgstr ""
"为了执行重新引导和恢复出厂设置操作，设备需要首先向 IoT Platform 发送有关其支持的信息。可通过调用以下具有布尔值的方法来实现："

#: ../docs/devices/libraries/java_deviceManagement.rst:527
msgid "As the manage request informs the IoT Platform about the device action support, manage() method needs to be called right after setting the device action support."
msgstr ""
"在管理请求向 IoT Platform 发送有关设备操作支持的信息时，需要在设置设备操作支持后立即调用 manage() 方法。"

#: ../docs/devices/libraries/java_deviceManagement.rst:529
msgid "**2. Create the Device Action Handler**"
msgstr ""
"**2. 创建设备操作处理程序**"

#: ../docs/devices/libraries/java_deviceManagement.rst:531
msgid "In order to support the device action, the device needs to create a handler and add it to ManagedDevice. The handler must extend a DeviceActionHandler class and provide implementation for the following methods:"
msgstr ""
"为了支持设备操作，设备需要创建一个处理程序并将其添加到 ManagedDevice。该处理程序必须扩展 DeviceActionHandler 类并实现以下方法："

#: ../docs/devices/libraries/java_deviceManagement.rst:538
msgid "**2.1 Sample implementation of handleReboot**"
msgstr ""
"**2.1 handleReboot 的样本实现**"

#: ../docs/devices/libraries/java_deviceManagement.rst:540
msgid "The implementation must add a logic to reboot the device and report the status of the reboot via DeviceAction object. The device needs to update the status along with a optional message only when there is a failure (because the successful operation reboots the device and the device code will not have a control to update the IoT Platform). A sample reboot implementation for a Raspberry Pi device is shown below:"
msgstr ""
"该实现必须添加用于重新引导设备的逻辑，并且通过 DeviceAction 对象报告重新引导的状态。仅当发生故障时设备才需要更新状态以及可选消息（因为成功的操作会重新引导设备，且设备代码不会有所控制以更新 IoT Platform）。下面显示了 Raspberry Pi 设备的样本重新引导实现："

#: ../docs/devices/libraries/java_deviceManagement.rst:563
msgid "The complete code can be found in the device management sample `DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__."
msgstr ""
"完整的代码可在设备管理样本 `DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__中找到。"

#: ../docs/devices/libraries/java_deviceManagement.rst:565
msgid "**2.2 Sample implementation of handleFactoryReset**"
msgstr ""
"**2.2 handleFactoryReset 的样本实现**"

#: ../docs/devices/libraries/java_deviceManagement.rst:567
msgid "The implementation must add a logic to reset the device to factory settings and report the status via DeviceAction object. The device needs to update the status along with a optional message only when there is a failure (because as part of this process, the device reboots and the device will not have a control to update status to IoT Platform). The skeleton of the Factory Reset implementation is shown below:"
msgstr ""
"该实现必须添加用于将设备恢复为出厂设置的逻辑，并且通过 DeviceAction 对象报告状态。仅当发生故障时设备才需要更新状态以及可选消息（因为作为该过程的一部分，设备将重新引导并且不会有所控制以更新 IoT Platform 的状态）。下面显示了“恢复出厂设置”实现的框架："

#: ../docs/devices/libraries/java_deviceManagement.rst:582
msgid "**3. Add the handler to ManagedDevice**"
msgstr ""
"**3. 向 ManagedDevice 添加处理程序**"

#: ../docs/devices/libraries/java_deviceManagement.rst:584
msgid "The created handler needs to be added to the ManagedDevice instance so that the ibmiotf client library invokes the corresponding method when there is a device action request from IoT Platform."
msgstr ""
"已创建的处理程序需要添加到 ManagedDevice 实例，以便在收到来自 IoT Platform 的设备操作请求时 ibmiotf 客户机库会调用相应的方法。"

#: ../docs/devices/libraries/java_deviceManagement.rst:591
msgid "Refer to `this page <../device_mgmt/operations/device_actions.html>`__ for more information about the Device Action."
msgstr ""
"有关设备操作的更多信息，请参阅 `本页面 <../device_mgmt/operations/device_actions.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:594
msgid "Listen for Device attribute changes"
msgstr ""
"侦听设备属性更改"

#: ../docs/devices/libraries/java_deviceManagement.rst:596
msgid "This ibmiotf client library updates the corresponding objects whenever there is an update request from the IoT Platform, these update requests are initiated by the application either directly or indirectly (Firmware Update) via the IoT Platform ReST API. Apart from updating these attributes, the library provides a mechanism where the device can be notified whenever a device attribute is updated."
msgstr ""
"该 ibmiotf 客户机库会在收到来自 IoT Platform 的更新请求时更新相应的对象，这些更新请求是由应用程序直接启动，或通过 IoT Platform ReST API 间接（固件更新）启动的。除更新这些属性外，该库还提供一种机制，使设备能够在其属性已更新时得到通知。"

#: ../docs/devices/libraries/java_deviceManagement.rst:598
msgid "Attributes that can be updated by this operation are location, metadata, device information and firmware."
msgstr ""
"此操作可以更新的属性有位置、元数据、设备信息和固件。"

#: ../docs/devices/libraries/java_deviceManagement.rst:600
msgid "In order to get notified, the device needs to add a property change listener on those objects that it is interested."
msgstr ""
"要获取通知，设备需要对感兴趣的对象添加属性更改侦听器。"

#: ../docs/devices/libraries/java_deviceManagement.rst:609
msgid "Also, the device needs to implement the propertyChange() method where it receives the notification. A sample implementation is as follows:"
msgstr ""
"另外，设备还需要实现 propertyChange() 方法，在此接收通知。样本实现如下："

#: ../docs/devices/libraries/java_deviceManagement.rst:642
msgid "Refer to `this page <../device_mgmt/operations/update.html>`__ for more information about updating the device attributes."
msgstr ""
"有关更新设备属性的更多信息，请参阅 `本页面 <../device_mgmt/operations/update.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:645
msgid "Examples"
msgstr ""
"示例"

#: ../docs/devices/libraries/java_deviceManagement.rst:646
msgid "`SampleRasPiDMAgent <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgent.java>`__ - A sample agent code that shows how to perform various device management operations on Raspberry Pi."
msgstr ""
"`SampleRasPiDMAgent <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgent.java>`__ - 显示如何在 Raspberry Pi 中执行各种设备管理操作的样本代理程序代码。"

#: ../docs/devices/libraries/java_deviceManagement.rst:647
msgid "`SampleRasPiManagedDevice <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiManagedDevice.java>`__ - A sample code that shows how one can perform both device operations and management operations."
msgstr ""
"`SampleRasPiManagedDevice <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiManagedDevice.java>`__ - 显示用户如何同时执行设备操作和管理操作的样本代码。"

#: ../docs/devices/libraries/java_deviceManagement.rst:648
msgid "`SampleRasPiDMAgentWithCustomMqttAsyncClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttAsyncClient.java>`__ - A sample agent code with custom MqttAsyncClient."
msgstr ""
"`SampleRasPiDMAgentWithCustomMqttAsyncClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttAsyncClient.java>`__ - 包含定制 MqttAsyncClient 的样本代理程序代码。"

#: ../docs/devices/libraries/java_deviceManagement.rst:649
msgid "`SampleRasPiDMAgentWithCustomMqttClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttClient.java>`__ - A sample agent code with custom MqttClient."
msgstr ""
"`SampleRasPiDMAgentWithCustomMqttClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttClient.java>`__ - 包含定制 MqttClient 的样本代理程序代码。"

#: ../docs/devices/libraries/java_deviceManagement.rst:650
msgid "`RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__ - A sample implementation of FirmwareHandler for Raspberry Pi."
msgstr ""
"`RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__ - Raspberry Pi 的 FirmwareHandler 的样本实现。"

#: ../docs/devices/libraries/java_deviceManagement.rst:651
msgid "`DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__ - A sample implementation of DeviceActionHandler"
msgstr ""
"`DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__ - DeviceActionHandler 的样本实现"

#: ../docs/devices/libraries/java_deviceManagement.rst:652
msgid "`ManagedDeviceWithLifetimeSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/ManagedDeviceWithLifetimeSample.java>`__ - A sample that shows how to send regular manage request with lifetime specified."
msgstr ""
"`ManagedDeviceWithLifetimeSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/ManagedDeviceWithLifetimeSample.java>`__ - 显示如何发送指定了生命周期的常规管理请求的样本。"

#: ../docs/devices/libraries/java_deviceManagement.rst:653
msgid "`DeviceAttributesUpdateListenerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceAttributesUpdateListenerSample.java>`__ - A sample listener code that shows how to listen for a various device attribute changes ."
msgstr ""
"`DeviceAttributesUpdateListenerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceAttributesUpdateListenerSample.java>`__ - 显示如何侦听各种设备属性变更的样本侦听器代码。"

#: ../docs/devices/libraries/java_deviceManagement.rst:654
msgid "`NonBlockingDiagnosticsErrorCodeUpdateSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/NonBlockingDiagnosticsErrorCodeUpdateSample.java>`__ - A sample that shows how to add ErrorCode without waiting for response from the server."
msgstr ""
"`NonBlockingDiagnosticsErrorCodeUpdateSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/NonBlockingDiagnosticsErrorCodeUpdateSample.java>`__ - 显示如何无需等待服务器响应即可添加 ErrorCode 的样本。"

#: ../docs/devices/libraries/java_deviceManagement.rst:657
msgid "Recipe"
msgstr ""
"诀窍"

#: ../docs/devices/libraries/java_deviceManagement.rst:659
msgid "Refer to `the recipe <https://developer.ibm.com/recipes/tutorials/connect-raspberry-pi-as-managed-device-to-ibm-iot-foundation/>`__ that shows how to connect the Raspberry Pi device as managed device to IoT Platform to perform various device management operations in step by step using this client library."
msgstr ""
"请参阅 `诀窍 <https://developer.ibm.com/recipes/tutorials/connect-raspberry-pi-as-managed-device-to-ibm-iot-foundation/>`__，其中显示了如何将 Raspberry Pi 设备作为受管设备连接到 IoT Platform，以使用该客户机库逐步执行各种设备管理操作。"

