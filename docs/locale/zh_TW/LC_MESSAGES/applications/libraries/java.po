# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-06-15 21:50-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/applications/libraries/java.rst:2
msgid "Java for Application Developers"
msgstr ""
"適用於應用程式開發人員的 Java"

#: ../docs/applications/libraries/java.rst:4
msgid "See `iot-java <https://github.com/ibm-messaging/iot-java>`_ in GitHub"
msgstr ""
"請參閱 GitHub 中的 `iot-java <https://github.com/ibm-messaging/iot-java>`_"

#: ../docs/applications/libraries/java.rst:7
msgid "Constructor"
msgstr ""
"建構子"

#: ../docs/applications/libraries/java.rst:9
msgid "The constructor builds the client instance, and accepts a Properties object containing the following definitions:"
msgstr ""
"建構子可建置用戶端實例，並接受包含下列定義的 Properties 物件："

#: ../docs/applications/libraries/java.rst:11
msgid "``org`` - Your organization ID (This is a required field. In case of quickstart flow, provide org as ``quickstart``)."
msgstr ""
"``org`` - 組織 ID（這是必要欄位。若是有 Quickstart 流程，則為 org 提供 ``quickstart``）。"

#: ../docs/applications/libraries/java.rst:12
msgid "``id`` - The unique ID of your application within your organization."
msgstr ""
"``id`` - 組織內應用程式的唯一 ID。"

#: ../docs/applications/libraries/java.rst:13
msgid "``auth-method`` - Method of authentication (the only value currently supported is ``apikey``)."
msgstr ""
"``auth-method`` - 鑑別的方法（目前唯一支援的值是 ``apikey``）。"

#: ../docs/applications/libraries/java.rst:14
msgid "``auth-key`` - API key (required if auth-method is ``apikey``)."
msgstr ""
"``auth-key`` - API 金鑰（如果 auth-method 為 ``apikey`` 則需要）。"

#: ../docs/applications/libraries/java.rst:15
msgid "``auth-token`` - API key token (required if auth-method is ``apikey``)."
msgstr ""
"``auth-token`` - API 金鑰記號（如果 auth-method 為 ``apikey`` 則需要）。"

#: ../docs/applications/libraries/java.rst:16
msgid "``clean-session`` - true or false (required only if you want to connect the application in durable subscription. By default the clean-session is set to true)."
msgstr ""
"``clean-session`` - true 或 false（只有在您想要連接可延續訂閱中的應用程式時才需要。依預設，clean-session 會設為 true）。"

#: ../docs/applications/libraries/java.rst:17
msgid "``shared-subscription`` - true or false (required only if shared subscription needs to be enabled)."
msgstr ""
"``shared-subscription`` - true 或 false（只有在必須啟用共用訂閱時才需要）。"

#: ../docs/applications/libraries/java.rst:19
msgid "One must set ``shared-subscription`` to true to build scalable applications which will load balance messages across multiple instances of the application. Refer to the `scalable applications section <https://docs.internetofthings.ibmcloud.com/applications/mqtt.html#/scalable-applications#scalable-applications>`__ for more information about the load balancing."
msgstr ""
"必須將 ``shared-subscription`` 設為 true，才能建置可調式應用程式，在多個應用程式實例之間對訊息進行負載平衡。如需負載平衡的相關資訊，請參閱 `可調式應用程式區段 <https://docs.internetofthings.ibmcloud.com/applications/mqtt.html#/scalable-applications#scalable-applications>`__。"

#: ../docs/applications/libraries/java.rst:21
msgid "The Properties object creates definitions which are used to interact with the IoT Platform module. If no options are provided or organization is provided as quickstart, the client will connect to the IoT Platform Quickstart, and default to an unregistered device."
msgstr ""
"Properties 物件會建立用來與 IoT Platform 模組互動的定義。如果未提供選項，或為組織提供 quickstart，用戶端將連接至 IoT Platform Quickstart，並預設為已取消登錄的裝置。"

#: ../docs/applications/libraries/java.rst:23
msgid "The following code snippet shows how to construct the ApplicationClient instance in Quickstart mode,"
msgstr ""
"下列 Snippet 顯示如何在 Quickstart 模式中建構 ApplicationClient 實例，"

#: ../docs/applications/libraries/java.rst:36
msgid "The following code snippet shows how to construct the ApplicationClient instance in registered flow,"
msgstr ""
"下列 Snippet 顯示如何在已登錄的流程中建構 ApplicationClient 實例，"

#: ../docs/applications/libraries/java.rst:50
msgid "Using a configuration file"
msgstr ""
"使用配置檔"

#: ../docs/applications/libraries/java.rst:52
msgid "Instead of including a Properties object directly, you can use a configuration file containing the name-value pairs for Properties. If you are using a configuration file containing a Properties object, use the following code format."
msgstr ""
"可以使用一個包含 Properties 名稱/值配對的配置檔，而不直接包含 Properties 物件。如果使用的配置檔包含 Properties 物件，請使用下列程式碼格式。"

#: ../docs/applications/libraries/java.rst:60
msgid "The application configuration file must be in the following format:"
msgstr ""
"應用程式配置檔必須為下列格式："

#: ../docs/applications/libraries/java.rst:77
msgid "Connecting to the IoT Platform"
msgstr ""
"連接至 IoT Platform"

#: ../docs/applications/libraries/java.rst:79
msgid "Connect to the Watson IoT Platform by calling the connect function. The connect function takes an optional boolean parameter autoRetr (by default autoRetry is true) that controls allows the library to retry the connection when there is an MqttException. Note that the library won't retry when there is a MqttSecurityException due to incorrect device registration details passed even if the autoRetry is set to true ."
msgstr ""
"呼叫 connect 函數以連接至 Watson IoT Platform。connect 函數接受選用的布林參數 autoRetr（依預設，autoRetry 為 true），此參數容許程式庫在發生 MqttException 時重試連線。請注意，如果由於傳遞的裝置登錄詳細資料不正確而導致發生 MqttSecurityException，則程式庫將不會重試，即使 autoRetry 設為 true 亦如此。"

#: ../docs/applications/libraries/java.rst:92
msgid "After the successful connection to the IoT Platform service, the application client can perform the following operations, like subscribing to device events, subscribing to device status, publishing device events and commands."
msgstr ""
"成功連接至 IoT Platform 服務之後，應用程式用戶端可執行下列作業，例如訂閱裝置事件、訂閱裝置狀態，以及發佈裝置事件和指令等。"

#: ../docs/applications/libraries/java.rst:99
msgid "Subscribing to device events"
msgstr ""
"訂閱裝置事件"

#: ../docs/applications/libraries/java.rst:100
msgid "Events are the mechanism by which devices publish data to the IoT Platform. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"事件是裝置藉以將資料發佈到 IoT Platform 的機制。裝置可控制事件的內容，並為它傳送的每一個事件指派一個名稱。"

#: ../docs/applications/libraries/java.rst:102
msgid "When an event is received by the IoT Platform the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""
"當 IoT Platform 接收事件時，會使用接收事件的連線認證來判斷是哪個裝置傳送了事件。使用此架構，裝置就不可能假冒成另一個裝置。"

#: ../docs/applications/libraries/java.rst:104
msgid "By default, applications will subscribe to all events from all connected devices. Use the type, id, event and msgFormat parameters to control the scope of the subscription. A single client can support multiple subscriptions. The code samples below give examples of how to subscribe to devices dependent on device type, id, event and msgFormat parameters."
msgstr ""
"依預設，應用程式會訂閱所有已連接裝置的所有事件。請使用類型、ID、事件及 msgFormat 參數來控制訂閱的範圍。單一用戶端可支援多個訂閱。下列程式碼範例提供如何根據裝置類型、ID、事件及 msgFormat 參數來訂閱裝置的範例。"

#: ../docs/applications/libraries/java.rst:107
msgid "To subscribe to all events from all devices"
msgstr ""
"訂閱所有裝置的所有事件"

#: ../docs/applications/libraries/java.rst:115
msgid "To subscribe to all events from all devices of a specific type"
msgstr ""
"訂閱特定類型之所有裝置的所有事件"

#: ../docs/applications/libraries/java.rst:123
msgid "To subscribe to all events from a specific device"
msgstr ""
"訂閱特定裝置的所有事件"

#: ../docs/applications/libraries/java.rst:131
msgid "To subscribe to a specific event from two or more different devices"
msgstr ""
"訂閱兩個以上不同裝置的特定事件"

#: ../docs/applications/libraries/java.rst:140
msgid "To subscribe to events published by a device in json format"
msgstr ""
"訂閱裝置已發佈且為 Json 格式的事件"

#: ../docs/applications/libraries/java.rst:152
msgid "Handling events from devices"
msgstr ""
"處理裝置的事件"

#: ../docs/applications/libraries/java.rst:153
msgid "To process the events received by your subscriptions you need to register an event callback method. The messages are returned as an instance of the Event class which has the following properties:"
msgstr ""
"若要處理訂閱所接收的事件，您需要登錄事件回呼方法。會以「事件」類別的實例傳回訊息，且此類別具有下列內容："

#: ../docs/applications/libraries/java.rst:155
msgid "event.device - string (uniquely identifies the device across all types of devices in the organization)"
msgstr ""
"event.device - 字串（可在組織中所有裝置類型之間唯一識別該裝置）"

#: ../docs/applications/libraries/java.rst:156
msgid "event.deviceType - string"
msgstr ""
"event.deviceType - 字串"

#: ../docs/applications/libraries/java.rst:157
msgid "event.deviceId - string"
msgstr ""
"event.deviceId - 字串"

#: ../docs/applications/libraries/java.rst:158
msgid "event.event - string"
msgstr ""
"event.event - 字串"

#: ../docs/applications/libraries/java.rst:159
msgid "event.format - string"
msgstr ""
"event.format - 字串"

#: ../docs/applications/libraries/java.rst:160
msgid "event.data - dict"
msgstr ""
"event.data - dict"

#: ../docs/applications/libraries/java.rst:161
msgid "event.timestamp - datetime"
msgstr ""
"event.timestamp - 日期時間"

#: ../docs/applications/libraries/java.rst:163
msgid "A sample implementation of the Event callback,"
msgstr ""
"「事件」回呼的範例實作，"

#: ../docs/applications/libraries/java.rst:212
msgid "Once the event callback is added to the ApplicationClient, the processEvent() method is invoked whenever any event is published on the subscribed criteria, The following snippet shows how to add the Event call back into ApplicationClient instance,"
msgstr ""
"在事件回呼新增至 ApplicationClient 之後，每當在已訂閱的準則上發佈任何事件時，即會呼叫 processEvent() 方法。下列 Snippet 顯示如何將「事件」回呼新增至 ApplicationClient 實例中，"

#: ../docs/applications/libraries/java.rst:220
msgid "Similar to subscribing to device events, the application can subscribe to commands that are sent to the devices. Following code snippet shows how to subscribe to all commands to all the devices in the organization:"
msgstr ""
"如同訂閱裝置事件，應用程式也可以訂閱傳送至裝置的指令。下列程式碼 Snippet 顯示如何訂閱傳送至組織中所有裝置的所有指令："

#: ../docs/applications/libraries/java.rst:228
msgid "Overloaded methods are available to control the command subscription. The processCommand() method is called when a command is sent to the device that matches the command subscription."
msgstr ""
"超載方法可用來控制指令訂閱。當指令傳送至符合指令訂閱的裝置時，會呼叫 processCommand() 方法。"

#: ../docs/applications/libraries/java.rst:235
msgid "Subscribing to device status"
msgstr ""
"訂閱裝置狀態"

#: ../docs/applications/libraries/java.rst:236
msgid "Similar to subscribing to device events, applications can subscribe to device status, like device connect and disconnect to IoT Platform. By default, this will subscribe to status updates for all connected devices. Use the Device Type and Device Id parameters to control the scope of the subscription. A single ApplicationClient can support multiple subscriptions."
msgstr ""
"如同訂閱裝置事件，應用程式也可以訂閱裝置狀態，例如裝置與 IoT Platform 連線或中斷連線。依預設，這會訂閱所有連線裝置的狀態更新。使用「裝置類型」和「裝置 ID」參數，可控制訂閱的範圍。單一 ApplicationClient 可支援多個訂閱。"

#: ../docs/applications/libraries/java.rst:239
msgid "Subscribe to status updates for all devices"
msgstr ""
"訂閱所有裝置的狀態更新項目"

#: ../docs/applications/libraries/java.rst:248
msgid "Subscribe to status updates for all devices of a specific type"
msgstr ""
"訂閱特定類型的所有裝置的狀態更新項目"

#: ../docs/applications/libraries/java.rst:257
msgid "Subscribe to status updates for two different devices"
msgstr ""
"訂閱兩個不同裝置的狀態更新項目"

#: ../docs/applications/libraries/java.rst:270
msgid "Handling status updates from devices"
msgstr ""
"處理裝置的狀態更新項目"

#: ../docs/applications/libraries/java.rst:271
msgid "To process the status updates received by your subscriptions you need to register an status event callback method. The messages are returned as an instance of the Status class which contains the below mentioned properties:"
msgstr ""
"若要處理訂閱所接收的狀態更新，您必須登錄狀態事件回呼方法。會以「狀態」類別的實例傳回訊息，且此類別具有下列內容："

#: ../docs/applications/libraries/java.rst:273
msgid "The following properties are set for both \"Connect\" and \"Disconnect\" status events:"
msgstr ""
"已同時對「連接」和「中斷連接」狀態事件設定了下列內容："

#: ../docs/applications/libraries/java.rst:275
msgid "status.clientAddr - string"
msgstr ""
"status.clientAddr - 字串"

#: ../docs/applications/libraries/java.rst:276
msgid "status.protocol - string"
msgstr ""
"status.protocol - 字串"

#: ../docs/applications/libraries/java.rst:277
msgid "status.clientId - string"
msgstr ""
"status.clientId - 字串"

#: ../docs/applications/libraries/java.rst:278
msgid "status.user - string"
msgstr ""
"status.user - 字串"

#: ../docs/applications/libraries/java.rst:279
msgid "status.time - java.util.Date"
msgstr ""
"status.time - java.util.Date"

#: ../docs/applications/libraries/java.rst:280
msgid "status.action - string"
msgstr ""
"status.action - 字串"

#: ../docs/applications/libraries/java.rst:281
msgid "status.connectTime - java.util.Date"
msgstr ""
"status.connectTime - java.util.Date"

#: ../docs/applications/libraries/java.rst:282
msgid "status.port - integer"
msgstr ""
"status.port - 整數"

#: ../docs/applications/libraries/java.rst:284
msgid "The following properties are only set when the action is \"Disconnect\":"
msgstr ""
"只有當動作為「中斷連接」時，才會設定下列內容："

#: ../docs/applications/libraries/java.rst:286
msgid "status.writeMsg - integer"
msgstr ""
"status.writeMsg - 整數"

#: ../docs/applications/libraries/java.rst:287
msgid "status.readMsg - integer"
msgstr ""
"status.readMsg - 整數"

#: ../docs/applications/libraries/java.rst:288
msgid "status.reason - string"
msgstr ""
"status.reason - 字串"

#: ../docs/applications/libraries/java.rst:289
msgid "status.readBytes - integer"
msgstr ""
"status.readBytes - 整數"

#: ../docs/applications/libraries/java.rst:290
msgid "status.writeBytes - integer"
msgstr ""
"status.writeBytes - 整數"

#: ../docs/applications/libraries/java.rst:292
msgid "A sample implementation of the Status callback,"
msgstr ""
"「狀態」回呼的範例實作，"

#: ../docs/applications/libraries/java.rst:316
msgid "Once the status callback is added to the ApplicationClient, the processDeviceStatus() method is invoked whenever any device is connected or disconnected from IoT Platform that matches the criteria, The following snippet shows how to add the status call back instance into ApplicationClient,"
msgstr ""
"在狀態回呼新增至 ApplicationClient 之後，每當有任何符合準則的裝置與 IoT Platform 連線或中斷連線時，即會呼叫 processDeviceStatus() 方法。下列 Snippet 顯示如何將狀態回呼實例新增至 ApplicationClient 中。"

#: ../docs/applications/libraries/java.rst:325
msgid "As similar to device status, the application can subscribe to any other application connect or disconnect status as well. Following code snippet shows how to subscribe to the application status in the organization:"
msgstr ""
"如同裝置狀態，應用程式也可訂閱任何其他應用程式連線或中斷連線狀態。下列程式碼 Snippet 說明如何訂閱組織中的應用程式狀態："

#: ../docs/applications/libraries/java.rst:333
msgid "Overloaded method is available to control the status subscription to a particular application. The processApplicationStatus() method is called whenever any application is connected or disconnected from IoT Platform that matches the criteria."
msgstr ""
"超載方法可用來控制特定應用程式的狀態訂閱。每當有任何符合準則的應用程式與 IoT Platform 連線或中斷連線時，即會呼叫 processApplicationStatus() 方法。"

#: ../docs/applications/libraries/java.rst:340
msgid "Publishing events from devices"
msgstr ""
"從裝置發佈事件"

#: ../docs/applications/libraries/java.rst:341
msgid "Applications can publish events as if they originated from a Device."
msgstr ""
"應用程式可當成事件是從裝置產生來發佈事件。"

#: ../docs/applications/libraries/java.rst:358
msgid "Publish events using HTTP(s)"
msgstr ""
"使用 HTTP(S) 發佈事件"

#: ../docs/applications/libraries/java.rst:359
msgid "Apart from MQTT, the application can publish device events to IBM Watson IoT Platform using HTTP(s) by following 3 simple steps,"
msgstr ""
"除了 MQTT 以外，應用程式也可使用 HTTP(S)，以下列 3 個簡單的步驟將裝置事件發佈至 IBM Watson IoT Platform。"

#: ../docs/applications/libraries/java.rst:361
msgid "Construct the ApplicationClient instance using the properties file"
msgstr ""
"使用內容檔建構 ApplicationClient 實例"

#: ../docs/applications/libraries/java.rst:362
msgid "Construct the event that needs to be published"
msgstr ""
"建構需要發佈的事件"

#: ../docs/applications/libraries/java.rst:363
msgid "Specify the event name, Device Type, Device ID and publish the event using publishEventOverHTTP() method as follows,"
msgstr ""
"指定事件名稱、裝置類型、裝置 ID，並使用 publishEventOverHTTP() 方法發佈事件，如下所示。"

#: ../docs/applications/libraries/java.rst:377
msgid "The complete code can be found in the application example `HttpApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdeviceclient/src/com/ibm/iotf/sample/client/application/HttpApplicationDeviceEventPublish.java>`__"
msgstr ""
"完成碼位於應用程式範例 `HttpApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdeviceclient/src/com/ibm/iotf/sample/client/application/HttpApplicationDeviceEventPublish.java>`__中"

#: ../docs/applications/libraries/java.rst:379
msgid "Based on the settings in the properties file, the publishEventOverHTTP() method either publishes the event in Quickstart or in Registered flow. When the Organization ID mentioned in the properties file is quickstart, publishEventOverHTTP() method publishes the event to IoT Platform quickstart service and publishes the event in plain HTTP format. But when valid registered organization is mentioned in the properties file, this method always publishes the event in HTTPS (HTTP over SSL), so all the communication is secured."
msgstr ""
"根據內容檔中的設定，publishEventOverHTTP() 方法會在 Quickstart 或「已登錄」流程中發佈事件。如果內容檔中提及的「組織 ID」是 quickstart，則 publishEventOverHTTP() 方法會將事件發佈至 IoT Platform Quickstart 服務，並以一般 HTTP 格式發佈事件。但如果內容檔中提及的是有效的已登錄組織，則此方法一律會以 HTTPS（透過 SSL 的 HTTP）發佈事件，使所有通訊受到保護。"

#: ../docs/applications/libraries/java.rst:381
msgid "The event in HTTP(s) is published at most once Quality of Service, so the application needs to implement the retry logic when there is an error."
msgstr ""
"HTTP(s) 中的事件會以「最多一次」的服務品質發佈，因此在發生錯誤時，應用程式必須實作重試邏輯。"

#: ../docs/applications/libraries/java.rst:388
msgid "Publishing commands to devices"
msgstr ""
"對裝置發佈指令"

#: ../docs/applications/libraries/java.rst:389
msgid "Applications can publish commands to connected devices."
msgstr ""
"應用程式可對連接的裝置發佈指令。"

#: ../docs/applications/libraries/java.rst:408
msgid "Examples"
msgstr ""
"範例"

#: ../docs/applications/libraries/java.rst:409
msgid "`MQTTApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/MQTTApplicationDeviceEventPublish.java>`__ - A sample application that shows how to publish device events."
msgstr ""
"`MQTTApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/MQTTApplicationDeviceEventPublish.java>`__ - 顯示如何發佈裝置事件的範例應用程式。"

#: ../docs/applications/libraries/java.rst:410
msgid "`RegisteredApplicationCommandPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationCommandPublish.java>`__ - A sample application that shows how to publish a command to a device."
msgstr ""
"`RegisteredApplicationCommandPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationCommandPublish.java>`__ - 顯示如何將指令發佈至裝置的範例應用程式。"

#: ../docs/applications/libraries/java.rst:411
msgid "`RegisteredApplicationSubscribeSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationSubscribeSample.java>`__ - A sample application that shows how to subscribe for various events like, device events, device commands, device status and application status."
msgstr ""
"`RegisteredApplicationSubscribeSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationSubscribeSample.java>`__ - 顯示如何訂閱不同事件（例如裝置事件、裝置指令、裝置狀態及應用程式狀態）的範例應用程式。"

#: ../docs/applications/libraries/java.rst:412
msgid "`SharedSubscriptionSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/SharedSubscriptionSample.java>`__ - A sample application that shows how to build a scalable application which will load balance messages across multiple instances of the application."
msgstr ""
"`SharedSubscriptionSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/SharedSubscriptionSample.java>`__ - 顯示如何建置將在多個應用程式實例之間對訊息進行負載平衡之可調式應用程式的範例應用程式。"

#: ../docs/applications/libraries/java.rst:413
msgid "`Backup and Restore sample <https://github.com/ibm-messaging/iot-backup-restore-sample>`__ - A sample that shows how to backup the device configuration in Cloudant NoSQL DB and restore the same later."
msgstr ""
"`備份及還原範例 <https://github.com/ibm-messaging/iot-backup-restore-sample>`__ - 顯示如何在 Cloudant NoSQL DB 中備份裝置配置並在稍後還原相同配置的範例。"

