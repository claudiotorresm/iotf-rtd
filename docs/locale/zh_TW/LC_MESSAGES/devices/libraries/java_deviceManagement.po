# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-06-15 21:50-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/devices/libraries/java_deviceManagement.rst:3
msgid "Java Client Library - Managed Devices"
msgstr ""
"Java 用戶端程式庫 - 受管理裝置"

#: ../docs/devices/libraries/java_deviceManagement.rst:6
msgid "Introduction"
msgstr ""
"簡介"

#: ../docs/devices/libraries/java_deviceManagement.rst:8
msgid "This client library describes how to use devices with the Java ibmiotf client library. For help with getting started with this module, see `Java Client Library - Introduction <../java/javaintro.html>`__."
msgstr ""
"此用戶端程式庫說明如何使用裝置與 Java ibmiotf 用戶端程式庫搭配。如需開始使用此模組的說明，請參閱 `Java 用戶端程式庫 - 簡介 <../java/javaintro.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:10
msgid "This section contains information on how devices can  to the IoT Platform Device Management service using Java and perform device management operations like firmware update, location update, and diagnostics update."
msgstr ""
"本節包含裝置如何才能使用 Java 來連接至「IoT Platform 裝置管理」服務，並執行裝置管理作業（如韌體更新、位置更新以及診斷程式更新）的相關資訊。"

#: ../docs/devices/libraries/java_deviceManagement.rst:12
msgid "The Device section contains information on how devices can publish events and handle commands using the Java ibmiotf Client Library."
msgstr ""
"「裝置」區段包含裝置如何使用「Java ibmiotf 用戶端程式庫」來發佈事件及處理指令的相關資訊。"

#: ../docs/devices/libraries/java_deviceManagement.rst:14
msgid "The Applications section contains information on how applications can use the Java ibmiotf Client Library to interact with devices."
msgstr ""
"「應用程式」區段包含應用程式如何使用「Java ibmiotf 用戶端程式庫」與裝置互動的相關資訊。"

#: ../docs/devices/libraries/java_deviceManagement.rst:18
msgid "Device Management"
msgstr ""
"裝置管理"

#: ../docs/devices/libraries/java_deviceManagement.rst:19
msgid "The `device management <../reference/device_mgmt.html>`__ feature enhances the IoT Platform service with new capabilities for managing devices. Device management makes a distinction between managed and unmanaged devices:"
msgstr ""
"`裝置管理 <../reference/device_mgmt.html>`__ 功能會以用來管理裝置的新功能加強 IoT Platform 服務。裝置管理會區別受管理與未受管理的裝置："

#: ../docs/devices/libraries/java_deviceManagement.rst:21
msgid "**Managed Devices** are defined as devices which have a management agent installed. The management agent sends and receives device metadata and responds to device management commands from the IoT Platform."
msgstr ""
"**受管理裝置** 定義為已安裝管理代理程式的裝置。管理代理程式會傳送及接收裝置 meta 資料，並回應來自 IoT Platform 的裝置管理指令。"

#: ../docs/devices/libraries/java_deviceManagement.rst:22
msgid "**Unmanaged Devices** are any devices which do not have a device management agent. All devices begin their lifecycle as unmanaged devices, and can transition to managed devices by sending a message from a device management agent to the IoT Platform."
msgstr ""
"**未受管理的裝置** 是指沒有裝置管理代理程式的任何裝置。所有裝置都會以未受管理的裝置開始其生命週期，且可以從裝置管理代理程式傳送一則訊息給 IoT Platform，將它轉換成受管理裝置。"

#: ../docs/devices/libraries/java_deviceManagement.rst:27
msgid "Connecting to the IoT Platform Device Management Service"
msgstr ""
"連接至 IoT Platform 裝置管理服務"

#: ../docs/devices/libraries/java_deviceManagement.rst:30
msgid "Create DeviceData"
msgstr ""
"建立 DeviceData"

#: ../docs/devices/libraries/java_deviceManagement.rst:31
msgid "The `device model <../reference/device_model.html>`__ describes the metadata and management characteristics of a device. The device database in the IoT Platform is the master source of device information. Applications and managed devices are able to send updates to the database such as a location or the progress of a firmware update. Once these updates are received by the IoT Platform, the device database is updated, making the information available to applications."
msgstr ""
"`裝置模型 <../reference/device_model.html>`__ 說明裝置的 meta 資料和管理性質。IoT Platform 中的裝置資料庫是裝置資訊的主要來源。應用程式及受管理裝置能夠傳送更新至資料庫，如：位置或韌體更新的進度。IoT Platform 接收到這些更新之後，即會更新裝置資料庫，讓資訊可供應用程式使用。"

#: ../docs/devices/libraries/java_deviceManagement.rst:33
msgid "The device model in the ibmiotf client library is represented as DeviceData and to create a DeviceData one needs to create the following objects,"
msgstr ""
"ibmiotf 用戶端程式庫中的裝置模型會以 DeviceData 代表，若要建立 DeviceData，需要建立下列物件："

#: ../docs/devices/libraries/java_deviceManagement.rst:35
msgid "DeviceInfo (mandatory)"
msgstr ""
"DeviceInfo（必要）"

#: ../docs/devices/libraries/java_deviceManagement.rst:36
msgid "DeviceLocation (required if the device supports location update)"
msgstr ""
"DeviceLocation（如果裝置支援位置更新，則為必要）"

#: ../docs/devices/libraries/java_deviceManagement.rst:37
msgid "DiagnosticErrorCode (required if the device wants to update the ErrorCode)"
msgstr ""
"DiagnosticErrorCode（如果裝置要更新 ErrorCode，則為必要）"

#: ../docs/devices/libraries/java_deviceManagement.rst:38
msgid "DiagnosticLog (required if the device wants to update Log information)"
msgstr ""
"DiagnosticLog（如果裝置要更新「日誌」資訊，則為必要）"

#: ../docs/devices/libraries/java_deviceManagement.rst:39
msgid "DeviceFirmware (required if the device supports Firmware Actions)"
msgstr ""
"DeviceFirmware（如果裝置支援「韌體動作」，則為必要）"

#: ../docs/devices/libraries/java_deviceManagement.rst:40
msgid "DeviceMetadata (optional)"
msgstr ""
"DeviceMetadata（選用）"

#: ../docs/devices/libraries/java_deviceManagement.rst:42
msgid "The following code snippet shows how to create the mandatory object DeviceInfo along with an optional object DeviceMetadata with sample data:"
msgstr ""
"下列程式碼 Snippet 顯示如何使用取樣資料，建立必要物件 DeviceInfo 和選用物件 DeviceMetadata："

#: ../docs/devices/libraries/java_deviceManagement.rst:64
msgid "The following code snippet shows how to create the DeviceData object with the above created DeviceInfo and DeviceMetadata objects:"
msgstr ""
"下列程式碼 Snippet 顯示如何使用上方建立的 DeviceInfo 及 DeviceMetadata 物件來建立 DeviceData 物件："

#: ../docs/devices/libraries/java_deviceManagement.rst:73
msgid "Construct ManagedDevice"
msgstr ""
"建構 ManagedDevice"

#: ../docs/devices/libraries/java_deviceManagement.rst:74
msgid "ManagedDevice - A device class that connects the device as managed device to IoT Platform and enables the device to perform one or more Device Management operations. Also the ManagedDevice instance can be used to do normal device operations like publishing device events and listening for commands from application."
msgstr ""
"ManagedDevice - 此為一種裝置類別，將裝置作為受管理裝置連接至 IoT Platform，並可讓裝置執行一或多個「裝置管理」作業。此外，ManagedDevice 實例也可用來執行一般裝置作業，例如，發佈裝置事件以及接聽來自應用程式的指令。"

#: ../docs/devices/libraries/java_deviceManagement.rst:76
msgid "ManagedDevice exposes 2 different constructors to support different user patterns,"
msgstr ""
"ManagedDevice 利用 2 個不同的建構子來支援不同的使用者型樣。"

#: ../docs/devices/libraries/java_deviceManagement.rst:78
msgid "**Constructor One**"
msgstr ""
"**建構子一**"

#: ../docs/devices/libraries/java_deviceManagement.rst:80
msgid "Constructs a ManagedDevice instance by accepting the DeviceData and the following properties,"
msgstr ""
"透過接受 DeviceData 及下列內容的方式，來建構 ManagedDevice 實例："

#: ../docs/devices/libraries/java_deviceManagement.rst:82
msgid "Organization-ID - Your organization ID."
msgstr ""
"Organization-ID - 組織 ID。"

#: ../docs/devices/libraries/java_deviceManagement.rst:83
msgid "Device-Type - The type of your device."
msgstr ""
"Device-Type - 裝置的類型。"

#: ../docs/devices/libraries/java_deviceManagement.rst:84
msgid "Device-ID - The ID of your device."
msgstr ""
"Device-ID - 裝置的 ID。"

#: ../docs/devices/libraries/java_deviceManagement.rst:85
msgid "Authentication-Method - Method of authentication (The only value currently supported is \"token\")."
msgstr ""
"Authentication-Method - 鑑別的方法（目前唯一支援的值是 \"token\"）。"

#: ../docs/devices/libraries/java_deviceManagement.rst:86
msgid "Authentication-Token - API key token"
msgstr ""
"Authentication-Token - API 金鑰記號"

#: ../docs/devices/libraries/java_deviceManagement.rst:88
msgid "All these properties are required to interact with the IoT Platform."
msgstr ""
"需要有所有這些內容，才能與 IoT Platform 互動。"

#: ../docs/devices/libraries/java_deviceManagement.rst:90
msgid "The following code shows how to create a ManagedDevice instance:"
msgstr ""
"下列程式碼顯示如何建立 ManagedDevice 實例："

#: ../docs/devices/libraries/java_deviceManagement.rst:103
msgid "The existing users of DeviceClient might observe that the names of these properties have changed slightly. These names have been changed to mirror the names in the IoT Platform Dashboard, but the existing users who want to migrate from the DeviceClient to the ManagedDevice can still use the old format and construct the ManagedDevice instance as follows:"
msgstr ""
"DeviceClient 的現有使用者可能會注意到這些內容的名稱有輕微變更。這些名稱已變更，以鏡映「IoT Platform 儀表板」中的名稱，但是，想要從 DeviceClient 移轉至 ManagedDevice 的現有使用者仍然可以使用舊格式，並建構 ManagedDevice 實例，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:115
msgid "**Constructor Two**"
msgstr ""
"**建構子二**"

#: ../docs/devices/libraries/java_deviceManagement.rst:117
msgid "Construct a ManagedDevice instance by accepting the DeviceData and the MqttClient instance. This constructor requires the DeviceData to be created with additional device attributes like Device Type and Device Id as follows:"
msgstr ""
"透過接受 DeviceData 及 MqttClient 實例的方式，來建構 ManagedDevice 實例。此建構子需要 DeviceData 以「裝置類型」及「裝置 ID」等其他裝置屬性建立，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:135
msgid "Note this constructor helps the custom device users to create a ManagedDevice instance with the already created and connected MqttClient instance to take advantage of device management operations. But we recommend the users to use the library for all the device functionalities."
msgstr ""
"請注意，此建構子可協助自訂裝置使用者，使用已建立並已連接的 MqttClient 實例來建立 ManagedDevice 實例，以利用裝置管理作業。但是，對於所有裝置功能，我們建議使用者使用程式庫。"

#: ../docs/devices/libraries/java_deviceManagement.rst:138
msgid "Manage"
msgstr ""
"管理"

#: ../docs/devices/libraries/java_deviceManagement.rst:139
msgid "The device can invoke manage() method to participate in device management activities. The manage request will initiate a connect request internally if the device is not connected to the IoT Platform already:"
msgstr ""
"裝置可以呼叫 manage() 方法來參與裝置管理活動。如果裝置尚未連接至 IoT Platform，則管理要求會在內部起始連接要求："

#: ../docs/devices/libraries/java_deviceManagement.rst:145
msgid "The device can use overloaded manage (lifetime) method to register the device for a given timeframe. The timeframe specifies the length of time within which the device must send another **Manage device** request in order to avoid being reverted to an unmanaged device and marked as dormant."
msgstr ""
"裝置可使用 overloaded manage (lifetime) 方法，在給定的時間範圍內登錄裝置。時間範圍指定一個時間長度，裝置必須在此期間內傳送另一個 **管理裝置** 要求，以避免回復成未受管理裝置並標示為休眠。"

#: ../docs/devices/libraries/java_deviceManagement.rst:151
msgid "Refer to the `documentation <../device_mgmt/operations/manage.html>`__ for more information about the manage operation."
msgstr ""
"如需管理作業的相關資訊，請參閱 `文件 <../device_mgmt/operations/manage.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:154
msgid "Unmanage"
msgstr ""
"取消管理"

#: ../docs/devices/libraries/java_deviceManagement.rst:156
msgid "A device can invoke unmanage() method when it no longer needs to be managed. The IoT Platform will no longer send new device management requests to this device and all device management requests from this device will be rejected other than a **Manage device** request."
msgstr ""
"當裝置不再需要管理時，可呼叫 unmanage() 方法。IoT Platform 不會再傳送新的裝置管理要求給這個裝置，且除了 **管理裝置** 要求以外，來自這個裝置的所有裝置管理要求都會遭到拒絕。"

#: ../docs/devices/libraries/java_deviceManagement.rst:162
msgid "Refer to the `documentation <../device_mgmt/operations/manage.html>`__ for more information about the Unmanage operation."
msgstr ""
"如需「取消管理」作業的相關資訊，請參閱 `文件 <../device_mgmt/operations/manage.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:165
msgid "Location Update"
msgstr ""
"位置更新"

#: ../docs/devices/libraries/java_deviceManagement.rst:167
msgid "Devices that can determine their location can choose to notify the IoT Platform about location changes. In order to update the location, the device needs to create DeviceData instance with the DeviceLocation object first."
msgstr ""
"可判斷其位置的裝置可以選擇通知 IoT Platform 有關其位置變更。為了更新位置，裝置需要先利用 DeviceLocation 物件來建立 DeviceData 實例。"

#: ../docs/devices/libraries/java_deviceManagement.rst:182
msgid "Once the device is connected to IoT Platform, the location can be updated by invoking the following method:"
msgstr ""
"裝置連接至 IoT Platform 之後，便可呼叫下列方法來更新位置："

#: ../docs/devices/libraries/java_deviceManagement.rst:193
msgid "Later, any new location can be updated by changing the properties of the DeviceLocation object:"
msgstr ""
"稍後，只要變更 DeviceLocation 物件的內容，便可更新任何新位置："

#: ../docs/devices/libraries/java_deviceManagement.rst:204
msgid "The update() method informs the IoT Platform about the new location."
msgstr ""
"update() 方法會通知 IoT Platform 有關新位置。"

#: ../docs/devices/libraries/java_deviceManagement.rst:206
msgid "Refer to the `documentation <../device_mgmt/operations/update.html>`__ for more information about the Location update."
msgstr ""
"如需「位置」更新的相關資訊，請參閱 `文件 <../device_mgmt/operations/update.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:209
msgid "Append/Clear ErrorCodes"
msgstr ""
"附加/清除 ErrorCodes"

#: ../docs/devices/libraries/java_deviceManagement.rst:211
msgid "Devices can choose to notify the IoT Platform about changes in their error status. In order to send the ErrorCodes the device needs to construct a DiagnosticErrorCode object as follows:"
msgstr ""
"裝置可以選擇通知 IoT Platform 有關其錯誤狀態的變更。為了傳送 ErrorCodes，裝置需要建構一個 DiagnosticErrorCode 物件，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:223
msgid "Once the device is connected to IoT Platform, the ErrorCode can be sent by calling the send() method as follows:"
msgstr ""
"裝置連接至 IoT Platform 之後，便可透過呼叫 send() 方法來傳送 ErrorCode，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:229
msgid "Later, any new ErrorCodes can be easily added to the IoT Platform by calling the append method as follows:"
msgstr ""
"稍後，呼叫 append 方法便可輕易將任何新的 ErrorCode 新增至 IoT Platform，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:240
msgid "Also, the ErrorCodes can be cleared from IoT Platform by calling the clear() method as follows:"
msgstr ""
"此外，呼叫 clear() 方法便可從 IoT Platform 清除 ErrorCodes，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:252
msgid "Append/Clear Log messages"
msgstr ""
"附加/清除日誌訊息"

#: ../docs/devices/libraries/java_deviceManagement.rst:253
msgid "Devices can choose to notify the IoT Platform about changes by adding a new log entry. Log entry includes a log messages, its timestamp and severity, as well as an optional base64-encoded binary diagnostic data. In order to send log messages, the device needs to construct a DiagnosticLog object as follows:"
msgstr ""
"裝置可以選擇通知 IoT Platform 有關透過新增日誌項目而產生的變更。日誌項目包括日誌訊息、其時間戳記和嚴重性，以及可能包含 base64 編碼的二進位診斷資料。為了傳送日誌訊息，裝置需要建構一個 DiagnosticLog 物件，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:268
msgid "Once the device is connected to IoT Platform, the log message can be sent by calling the send() method as follows:"
msgstr ""
"裝置連接至 IoT Platform 之後，便可透過呼叫 send() 方法來傳送日誌訊息，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:274
msgid "Later, any new log messages can be easily added to the IoT Platform by calling the append method as follows:"
msgstr ""
"稍後，呼叫 append 方法便可輕易將任何新的日誌訊息新增至 IoT Platform，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:286
msgid "Also, the log messages can be cleared from IoT Platform by calling the clear method as follows:"
msgstr ""
"此外，呼叫 clear 方法便可從 IoT Platform 清除日誌訊息，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:297
msgid "The device diagnostics operations are intended to provide information on device errors, and does not provide diagnostic information relating to the devices connection to the IoT Platform."
msgstr ""
"裝置診斷作業的目的是提供裝置錯誤的相關資訊，但不會提供與 IoT Platform 的裝置連線相關的診斷資訊。"

#: ../docs/devices/libraries/java_deviceManagement.rst:299
msgid "Refer to the `documentation <../device_mgmt/operations/diagnostics.html>`__ for more information about the Diagnostics operation."
msgstr ""
"如需「診斷」作業的相關資訊，請參閱 `文件 <../device_mgmt/operations/diagnostics.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:302
msgid "Firmware Actions"
msgstr ""
"韌體動作"

#: ../docs/devices/libraries/java_deviceManagement.rst:303
msgid "The firmware update process is separated into two distinct actions:"
msgstr ""
"韌體更新程序分為兩個不同的動作："

#: ../docs/devices/libraries/java_deviceManagement.rst:305
msgid "Downloading Firmware"
msgstr ""
"下載韌體"

#: ../docs/devices/libraries/java_deviceManagement.rst:306
msgid "Updating Firmware."
msgstr ""
"更新韌體。"

#: ../docs/devices/libraries/java_deviceManagement.rst:308
msgid "The device needs to do the following activities to support Firmware Actions:"
msgstr ""
"裝置需要執行下列活動，才能支援「韌體動作」："

#: ../docs/devices/libraries/java_deviceManagement.rst:310
msgid "**1. Construct DeviceFirmware Object**"
msgstr ""
"**1. 建構 DeviceFirmware 物件**"

#: ../docs/devices/libraries/java_deviceManagement.rst:312
msgid "In order to perform Firmware actions the device needs to construct the DeviceFirmware object and add it to DeviceData as follows:"
msgstr ""
"為了執行「韌體」動作，裝置需要建構 DeviceFirmware 物件，並將其新增至 DeviceData，如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:334
msgid "The DeviceFirmware object represents the current firmware of the device and will be used to report the status of the Firmware Download and Firmware Update actions to IoT Platform."
msgstr ""
"DeviceFirmware 物件代表裝置的現行韌體，用來向 IoT Platform 報告「韌體下載」及「韌體更新」動作的狀態。"

#: ../docs/devices/libraries/java_deviceManagement.rst:336
msgid "**2. Inform the server about the Firmware action support**"
msgstr ""
"**2. 通知伺服器有關韌體動作支援**"

#: ../docs/devices/libraries/java_deviceManagement.rst:338
msgid "The device needs to set the firmware action flag to true in order for the server to initiate the firmware request. This can be achieved by invoking a following method with a boolean value:"
msgstr ""
"裝置需要將韌體動作旗標設為 true，伺服器才能起始韌體要求。以布林值呼叫下列方法，便可達成此作業："

#: ../docs/devices/libraries/java_deviceManagement.rst:345
msgid "As the manage request informs the IoT Platform about the firmware action support, manage() method needs to be called right after setting the firmware action support."
msgstr ""
"當管理要求通知 IoT Platform 有關韌體動作支援時，需要在設定韌體動作支援之後，立即呼叫 manage() 方法。"

#: ../docs/devices/libraries/java_deviceManagement.rst:347
msgid "**3. Create the Firmware Action Handler**"
msgstr ""
"**3. 建立韌體動作處理程式**"

#: ../docs/devices/libraries/java_deviceManagement.rst:349
msgid "In order to support the Firmware action, the device needs to create a handler and add it to ManagedDevice. The handler must extend a DeviceFirmwareHandler class and implement the following methods:"
msgstr ""
"為了支援「韌體」動作，裝置需要建立一個處理程式，並將其新增至 ManagedDevice。處理程式必須擴充 DeviceFirmwareHandler 類別，並實作下列方法："

#: ../docs/devices/libraries/java_deviceManagement.rst:356
msgid "**3.1 Sample implementation of downloadFirmware**"
msgstr ""
"**3.1 downloadFirmware 實作範例**"

#: ../docs/devices/libraries/java_deviceManagement.rst:358
msgid "The implementation must add logic to download the firmware and report the status of the download via DeviceFirmware object. If the Firmware Download operation is successful, then the state of the firmware to be set to DOWNLOADED and UpdateStatus should be set to SUCCESS."
msgstr ""
"實作必須新增邏輯以下載韌體，並透過 DeviceFirmware 物件報告下載的狀態。如果「韌體下載」作業順利完成，則韌體的狀態會設為 DOWNLOADED，而 UpdateStatus 應設為 SUCCESS。"

#: ../docs/devices/libraries/java_deviceManagement.rst:360
msgid "If an error occurs during Firmware Download the state should be set to IDLE and updateStatus should be set to one of the error status values:"
msgstr ""
"如果「韌體下載」期間發生錯誤，則狀態應設為 IDLE，而 updateStatus 應設為其中一個錯誤狀態值："

#: ../docs/devices/libraries/java_deviceManagement.rst:362
#: ../docs/devices/libraries/java_deviceManagement.rst:460
msgid "OUT_OF_MEMORY"
msgstr ""
"OUT_OF_MEMORY"

#: ../docs/devices/libraries/java_deviceManagement.rst:363
msgid "CONNECTION_LOST"
msgstr ""
"CONNECTION_LOST"

#: ../docs/devices/libraries/java_deviceManagement.rst:364
msgid "INVALID_URI"
msgstr ""
"INVALID_URI"

#: ../docs/devices/libraries/java_deviceManagement.rst:366
msgid "A sample Firmware Download implementation for a Raspberry Pi device is shown below:"
msgstr ""
"下方顯示 Raspberry Pi 裝置的「韌體下載」實作範例："

#: ../docs/devices/libraries/java_deviceManagement.rst:425
msgid "Device can check the integrity of the downloaded firmware image using the verifier and report the status back to IoT Platform. The verifier can be set by the device during the startup (while creating the DeviceFirmware Object) or as part of the Download Firmware request by the application. A sample code to verify the same is below:"
msgstr ""
"裝置可使用驗證器來檢查已下載韌體映像檔的完整性，並將狀態回報 IoT Platform。驗證器可由裝置在啟動期間（建立「DeviceFirmware 物件」時）進行設定，或者由應用程式當作「下載韌體」要求的一部分進行設定。驗證相同的範例程式碼如下："

#: ../docs/devices/libraries/java_deviceManagement.rst:452
#: ../docs/devices/libraries/java_deviceManagement.rst:496
msgid "The complete code can be found in the device management sample `RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__."
msgstr ""
"完整的程式碼位於裝置管理範例 `RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:454
msgid "**3.2 Sample implementation of updateFirmware**"
msgstr ""
"**3.2 updateFirmware 實作範例**"

#: ../docs/devices/libraries/java_deviceManagement.rst:456
msgid "The implementation must add logic to install the downloaded firmware and report the status of the update via DeviceFirmware object. If the Firmware Update operation is successful, then the state of the firmware should to be set to IDLE and UpdateStatus should be set to SUCCESS."
msgstr ""
"實作必須新增邏輯以安裝已下載的韌體，並透過 DeviceFirmware 物件報告更新的狀態。如果「韌體更新」作業順利完成，則韌體的狀態應設為 IDLE，而 UpdateStatus 應設為 SUCCESS。"

#: ../docs/devices/libraries/java_deviceManagement.rst:458
msgid "If an error occurs during Firmware Update, updateStatus should be set to one of the error status values:"
msgstr ""
"如果「韌體更新」期間發生錯誤，則 updateStatus 應設為其中一個錯誤狀態值："

#: ../docs/devices/libraries/java_deviceManagement.rst:461
msgid "UNSUPPORTED_IMAGE"
msgstr ""
"UNSUPPORTED_IMAGE"

#: ../docs/devices/libraries/java_deviceManagement.rst:463
msgid "A sample Firmware Update implementation for a Raspberry Pi device is shown below:"
msgstr ""
"下面顯示 Raspberry Pi 裝置的「韌體更新」實作範例："

#: ../docs/devices/libraries/java_deviceManagement.rst:498
msgid "**4. Add the handler to ManagedDevice**"
msgstr ""
"**4. 新增處理程式至 ManagedDevice**"

#: ../docs/devices/libraries/java_deviceManagement.rst:500
msgid "The created handler needs to be added to the ManagedDevice instance so that the ibmiotf client library invokes the corresponding method when there is a Firmware action request from IoT Platform."
msgstr ""
"已建立的處理程式需要新增至 ManagedDevice 實例，以便 ibmiotf 用戶端程式庫在 IoT Platform 發出「韌體」動作要求時，呼叫對應的方法。"

#: ../docs/devices/libraries/java_deviceManagement.rst:507
msgid "Refer to `this page <../device_mgmt/operations/firmware_actions.html>`__ for more information about the Firmware action."
msgstr ""
"如需「韌體」動作的相關資訊，請參閱 `此頁面 <../device_mgmt/operations/firmware_actions.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:510
msgid "Device Actions"
msgstr ""
"裝置動作"

#: ../docs/devices/libraries/java_deviceManagement.rst:511
msgid "The IoT Platform supports the following device actions:"
msgstr ""
"IoT Platform 支援下列裝置動作："

#: ../docs/devices/libraries/java_deviceManagement.rst:513
msgid "Reboot"
msgstr ""
"重新啟動"

#: ../docs/devices/libraries/java_deviceManagement.rst:514
msgid "Factory Reset"
msgstr ""
"重設為原廠設定"

#: ../docs/devices/libraries/java_deviceManagement.rst:516
msgid "The device needs to do the following activities to support Device Actions:"
msgstr ""
"裝置需要執行下列活動，才能支援「裝置動作」："

#: ../docs/devices/libraries/java_deviceManagement.rst:518
msgid "**1. Inform server about the Device Actions support**"
msgstr ""
"**1. 通知伺服器有關「裝置動作」支援**"

#: ../docs/devices/libraries/java_deviceManagement.rst:520
msgid "In order to perform Reboot and Factory Reset, the device needs to inform the IoT Platform about its support first. This can achieved by invoking a following method with a boolean value:"
msgstr ""
"為了執行「重新啟動」和「重設為原廠設定」，裝置需要先通知 IoT Platform 有關其支援。以布林值呼叫下列方法，便可達成此作業："

#: ../docs/devices/libraries/java_deviceManagement.rst:527
msgid "As the manage request informs the IoT Platform about the device action support, manage() method needs to be called right after setting the device action support."
msgstr ""
"當管理要求通知 IoT Platform 有關裝置動作支援時，需要在設定裝置動作支援之後，立即呼叫 manage() 方法。"

#: ../docs/devices/libraries/java_deviceManagement.rst:529
msgid "**2. Create the Device Action Handler**"
msgstr ""
"**2. 建立裝置動作處理程式**"

#: ../docs/devices/libraries/java_deviceManagement.rst:531
msgid "In order to support the device action, the device needs to create a handler and add it to ManagedDevice. The handler must extend a DeviceActionHandler class and provide implementation for the following methods:"
msgstr ""
"為了支援裝置動作，裝置需要建立一個處理程式，並將其新增至 ManagedDevice。處理程式必須擴充 DeviceActionHandler 類別，並提供下列方法的實作："

#: ../docs/devices/libraries/java_deviceManagement.rst:538
msgid "**2.1 Sample implementation of handleReboot**"
msgstr ""
"**2.1 handleReboot 的實作範例**"

#: ../docs/devices/libraries/java_deviceManagement.rst:540
msgid "The implementation must add a logic to reboot the device and report the status of the reboot via DeviceAction object. The device needs to update the status along with a optional message only when there is a failure (because the successful operation reboots the device and the device code will not have a control to update the IoT Platform). A sample reboot implementation for a Raspberry Pi device is shown below:"
msgstr ""
"實作必須新增邏輯以重新啟動裝置，並透過 DeviceAction 物件報告重新啟動的狀態。只有在失敗（因為順利完成的作業會重新啟動裝置，但裝置程式碼沒有控制項可以更新 IoT Platform）時，裝置才需要更新狀態以及選用訊息。下面顯示 Raspberry Pi 裝置的重新啟動實作範例："

#: ../docs/devices/libraries/java_deviceManagement.rst:563
msgid "The complete code can be found in the device management sample `DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__."
msgstr ""
"完整的程式碼位於裝置管理範例 `DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:565
msgid "**2.2 Sample implementation of handleFactoryReset**"
msgstr ""
"**2.2 handleFactoryReset 的實作範例**"

#: ../docs/devices/libraries/java_deviceManagement.rst:567
msgid "The implementation must add a logic to reset the device to factory settings and report the status via DeviceAction object. The device needs to update the status along with a optional message only when there is a failure (because as part of this process, the device reboots and the device will not have a control to update status to IoT Platform). The skeleton of the Factory Reset implementation is shown below:"
msgstr ""
"實作必須新增邏輯，將裝置重設為原廠設定，並透過 DeviceAction 物件報告狀態。只有在失敗（因為在此程序中，裝置會重新啟動，但裝置沒有控制項可以向 IoT Platform 更新狀態）時，裝置才需要更新狀態以及選用訊息。「重設為原廠設定」實作的架構如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:582
msgid "**3. Add the handler to ManagedDevice**"
msgstr ""
"**3. 新增處理程式至 ManagedDevice**"

#: ../docs/devices/libraries/java_deviceManagement.rst:584
msgid "The created handler needs to be added to the ManagedDevice instance so that the ibmiotf client library invokes the corresponding method when there is a device action request from IoT Platform."
msgstr ""
"已建立的處理程式需要新增至 ManagedDevice 實例，以便 ibmiotf 用戶端程式庫在 IoT Platform 發出裝置動作要求時，呼叫對應的方法。"

#: ../docs/devices/libraries/java_deviceManagement.rst:591
msgid "Refer to `this page <../device_mgmt/operations/device_actions.html>`__ for more information about the Device Action."
msgstr ""
"如需「裝置動作」的相關資訊，請參閱 `此頁面 <../device_mgmt/operations/device_actions.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:594
msgid "Listen for Device attribute changes"
msgstr ""
"接聽裝置屬性變更"

#: ../docs/devices/libraries/java_deviceManagement.rst:596
msgid "This ibmiotf client library updates the corresponding objects whenever there is an update request from the IoT Platform, these update requests are initiated by the application either directly or indirectly (Firmware Update) via the IoT Platform ReST API. Apart from updating these attributes, the library provides a mechanism where the device can be notified whenever a device attribute is updated."
msgstr ""
"只要 IoT Platform 發出更新要求，此 ibmiotf 用戶端程式庫便會更新對應的物件，這些更新要求由應用程式透過 IoT Platform REST API，直接或間接（韌體更新）起始。除了更新這些屬性之外，程式庫所提供的機制還包含在更新裝置屬性時通知裝置。"

#: ../docs/devices/libraries/java_deviceManagement.rst:598
msgid "Attributes that can be updated by this operation are location, metadata, device information and firmware."
msgstr ""
"可透過這項作業更新的屬性包含位置、meta 資料、裝置資訊及韌體。"

#: ../docs/devices/libraries/java_deviceManagement.rst:600
msgid "In order to get notified, the device needs to add a property change listener on those objects that it is interested."
msgstr ""
"為了取得通知，裝置需要在其感興趣的物件上，新增內容變更接聽器。"

#: ../docs/devices/libraries/java_deviceManagement.rst:609
msgid "Also, the device needs to implement the propertyChange() method where it receives the notification. A sample implementation is as follows:"
msgstr ""
"此外，裝置也需要在其接收通知的位置，實作 propertyChange() 方法。實作範例如下所示："

#: ../docs/devices/libraries/java_deviceManagement.rst:642
msgid "Refer to `this page <../device_mgmt/operations/update.html>`__ for more information about updating the device attributes."
msgstr ""
"如需更新裝置屬性的相關資訊，請參閱 `此頁面 <../device_mgmt/operations/update.html>`__。"

#: ../docs/devices/libraries/java_deviceManagement.rst:645
msgid "Examples"
msgstr ""
"範例"

#: ../docs/devices/libraries/java_deviceManagement.rst:646
msgid "`SampleRasPiDMAgent <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgent.java>`__ - A sample agent code that shows how to perform various device management operations on Raspberry Pi."
msgstr ""
"`SampleRasPiDMAgent <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgent.java>`__ - 代理程式程式碼範例，顯示如何在 Raspberry Pi 上執行各種裝置管理作業。"

#: ../docs/devices/libraries/java_deviceManagement.rst:647
msgid "`SampleRasPiManagedDevice <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiManagedDevice.java>`__ - A sample code that shows how one can perform both device operations and management operations."
msgstr ""
"`SampleRasPiManagedDevice <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiManagedDevice.java>`__ - 範例程式碼，顯示如何同時執行裝置作業和管理作業。"

#: ../docs/devices/libraries/java_deviceManagement.rst:648
msgid "`SampleRasPiDMAgentWithCustomMqttAsyncClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttAsyncClient.java>`__ - A sample agent code with custom MqttAsyncClient."
msgstr ""
"`SampleRasPiDMAgentWithCustomMqttAsyncClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttAsyncClient.java>`__ - 含有自訂 MqttAsyncClient 的代理程式程式碼範例。"

#: ../docs/devices/libraries/java_deviceManagement.rst:649
msgid "`SampleRasPiDMAgentWithCustomMqttClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttClient.java>`__ - A sample agent code with custom MqttClient."
msgstr ""
"`SampleRasPiDMAgentWithCustomMqttClient <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/SampleRasPiDMAgentWithCustomMqttClient.java>`__ - 含有自訂 MqttClient 的代理程式程式碼範例。"

#: ../docs/devices/libraries/java_deviceManagement.rst:650
msgid "`RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__ - A sample implementation of FirmwareHandler for Raspberry Pi."
msgstr ""
"`RasPiFirmwareHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/RasPiFirmwareHandlerSample.java>`__ - Raspberry Pi 的 FirmwareHandler 實作範例。"

#: ../docs/devices/libraries/java_deviceManagement.rst:651
msgid "`DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__ - A sample implementation of DeviceActionHandler"
msgstr ""
"`DeviceActionHandlerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceActionHandlerSample.java>`__ - DeviceActionHandler 的實作範例"

#: ../docs/devices/libraries/java_deviceManagement.rst:652
msgid "`ManagedDeviceWithLifetimeSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/ManagedDeviceWithLifetimeSample.java>`__ - A sample that shows how to send regular manage request with lifetime specified."
msgstr ""
"`ManagedDeviceWithLifetimeSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/ManagedDeviceWithLifetimeSample.java>`__ - 顯示如何傳送已指定生命期限的一般管理要求範例。"

#: ../docs/devices/libraries/java_deviceManagement.rst:653
msgid "`DeviceAttributesUpdateListenerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceAttributesUpdateListenerSample.java>`__ - A sample listener code that shows how to listen for a various device attribute changes ."
msgstr ""
"`DeviceAttributesUpdateListenerSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/DeviceAttributesUpdateListenerSample.java>`__ - 顯示如何接聽各種裝置屬性變更的接聽器程式碼範例。"

#: ../docs/devices/libraries/java_deviceManagement.rst:654
msgid "`NonBlockingDiagnosticsErrorCodeUpdateSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/NonBlockingDiagnosticsErrorCodeUpdateSample.java>`__ - A sample that shows how to add ErrorCode without waiting for response from the server."
msgstr ""
"`NonBlockingDiagnosticsErrorCodeUpdateSample <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdevicemanagement/src/com/ibm/iotf/sample/devicemgmt/device/NonBlockingDiagnosticsErrorCodeUpdateSample.java>`__ - 顯示如何新增 ErrorCode 而不需等待伺服器回應的範例。"

#: ../docs/devices/libraries/java_deviceManagement.rst:657
msgid "Recipe"
msgstr ""
"秘訣"

#: ../docs/devices/libraries/java_deviceManagement.rst:659
msgid "Refer to `the recipe <https://developer.ibm.com/recipes/tutorials/connect-raspberry-pi-as-managed-device-to-ibm-iot-foundation/>`__ that shows how to connect the Raspberry Pi device as managed device to IoT Platform to perform various device management operations in step by step using this client library."
msgstr ""
"請參閱 `秘訣 <https://developer.ibm.com/recipes/tutorials/connect-raspberry-pi-as-managed-device-to-ibm-iot-foundation/>`__，其顯示如何將 Raspberry Pi 裝置作為受管理裝置連接至 IoT Platform，以使用此用戶端程式庫，逐步執行各種裝置管理作業。"

