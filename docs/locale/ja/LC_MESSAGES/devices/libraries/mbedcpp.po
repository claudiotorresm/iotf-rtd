# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-06-15 21:50-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/devices/libraries/mbedcpp.rst:2
msgid "mBed C++ for Device Developers"
msgstr ""
"デバイス開発者用の mBed C++"

#: ../docs/devices/libraries/mbedcpp.rst:4
msgid "See `ibmiotf <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTF/>`_ on `developer.mbed.org <https://developer.mbed.org/>`_"
msgstr ""
"`developer.mbed.org <https://developer.mbed.org/>`_ にある `ibmiotf <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTF/>`_ を参照してください。"

#: ../docs/devices/libraries/mbedcpp.rst:6
msgid "The `mBed C++ client library <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTF/>`_ can be used to connect `mBed devices <https://www.mbed.com/en/>`__ like `LPC1768 <https://developer.mbed.org/platforms/mbed-LPC1768/>`__, `FRDM-K64F <https://developer.mbed.org/platforms/FRDM-K64F/>`__ and etc.. to the IoT Platform Cloud service with ease. Although the library uses C++, it still avoids dynamic memory allocations and use of STL functions as the mBed devices sometimes have idiosyncratic memory models which make porting difficult. In any case, the library allows one to make memory use as predictable as possible."
msgstr ""
"`mBed C++ クライアント・ライブラリー <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTF/>`_ を使用すると、`mBed デバイス <https://www.mbed.com/en/>`__ (`LPC1768 <https://developer.mbed.org/platforms/mbed-LPC1768/>`__、`FRDM-K64F <https://developer.mbed.org/platforms/FRDM-K64F/>`__ など) を IoT Platform のクラウド・サービスに簡単に接続できます。ライブラリーは C++ を使用しますが、mBed デバイスが固有のメモリー・モデルを持ち、それにより移植が難しくなる動的メモリー割り振りと STL 関数の使用が回避されています。いずれの場合でも、ライブラリーによってメモリーの使用量が可能な限り予測できるようになります。"

#: ../docs/devices/libraries/mbedcpp.rst:9
msgid "Dependencies"
msgstr ""
"従属関係"

#: ../docs/devices/libraries/mbedcpp.rst:11
msgid "`Eclipse Paho MQTT library <https://developer.mbed.org/teams/mqtt/code/MQTT/>`__ - Provides a MQTT client library for mBed devices, check `here <http://www.eclipse.org/paho/clients/c/embedded/>`__ for more information."
msgstr ""
"`Eclipse Paho MQTT ライブラリー <https://developer.mbed.org/teams/mqtt/code/MQTT/>`__ - mBed デバイスのために MQTT クライアント・ライブラリーを提供します。詳細情報は `こちら <http://www.eclipse.org/paho/clients/c/embedded/>`__ を参照してください。"

#: ../docs/devices/libraries/mbedcpp.rst:12
msgid "`EthernetInterface library <https://developer.mbed.org/users/mbed_official/code/EthernetInterface/>`__ - A mBed IP library over Ethernet."
msgstr ""
"`EthernetInterface ライブラリー <https://developer.mbed.org/users/mbed_official/code/EthernetInterface/>`__ - イーサネット経由の mBed IP ライブラリー。"

#: ../docs/devices/libraries/mbedcpp.rst:15
msgid "How to use the library"
msgstr ""
"ライブラリーの使用方法"

#: ../docs/devices/libraries/mbedcpp.rst:16
msgid "Use the `mBed Compiler <https://developer.mbed.org/compiler/>`__ to create your applications using this mBed C++ IBMIoTF Client Library. The mBed Compiler provides a lightweight online C/C++ IDE that is pre-configured to let you quickly write programs, compile and download them to run on your mbed Microcontroller. In fact, you don't have to install or set up anything to get running with mbed."
msgstr ""
"`mBed コンパイラー <https://developer.mbed.org/compiler/>`__ を使用して、この mBed C++ IBMIoTF クライアント・ライブラリーを使用してアプリケーションを作成します。mBed コンパイラーは、事前構成された軽量のオンライン C/C++ IDE を提供し、プログラムの作成や、コンパイルとダウンロードを素早く行い、mbed マイクロコントローラー上で実行できるようにします。実際に、mbed と共に動作させるために、何かをインストールしたり設定したりする必要はありません。"

#: ../docs/devices/libraries/mbedcpp.rst:19
msgid "Refer to the step by step `mBed C++ Client Library for IBM IoT Platform Recipe <https://developer.ibm.com/recipes/tutorials/mbed-c-client-library-for-ibm-iot-foundation/>`__ that shows how one can use this library to connect an ARM mBed NXP LPC 1768 microcontroller to the IoT Platform."
msgstr ""
"このライブラリーを使用して ARM mBed NXP LPC 1768 マイクロコントローラーを IoT Platform に接続する方法を示す `IBM IoT Platform のための mBed C++ クライアント・ライブラリーのレシピ <https://developer.ibm.com/recipes/tutorials/mbed-c-client-library-for-ibm-iot-foundation/>`__ を手順ごとに参照してください。"

#: ../docs/devices/libraries/mbedcpp.rst:22
msgid "Constructor"
msgstr ""
"コンストラクター"

#: ../docs/devices/libraries/mbedcpp.rst:24
msgid "The constructor builds the client instance, and accepts the following parameters:"
msgstr ""
"コンストラクターはクライアント・インスタンスを作成するものであり、次のパラメーターを受け入れます。"

#: ../docs/devices/libraries/mbedcpp.rst:26
msgid "org - Your organization ID. (This is a required field. In case of quickstart flow, provide org as quickstart.)"
msgstr ""
"org - 組織 ID。(これは必須フィールドです。Quickstart フローの場合、Quickstart として org を指定します。)"

#: ../docs/devices/libraries/mbedcpp.rst:27
msgid "type - The type of your device. (This is a required field.)"
msgstr ""
"type - デバイスのタイプ。(これは必須フィールドです。)"

#: ../docs/devices/libraries/mbedcpp.rst:28
msgid "id - The ID of your device. (This is a required field."
msgstr ""
"id - デバイスの ID。(これは必須フィールドです。"

#: ../docs/devices/libraries/mbedcpp.rst:29
msgid "auth-method - Method of authentication (This is an optional field, needed only for registered flow and the only value currently supported is \"token\")."
msgstr ""
"auth-method - 認証方式 (これはオプションのフィールドです。登録されたフローでのみ必要で、現在サポートされている値は「token」のみです)。"

#: ../docs/devices/libraries/mbedcpp.rst:30
msgid "auth-token - API key token (This is an optional field, needed only for registered flow)."
msgstr ""
"auth-token - API キー・トークン (これはオプションのフィールドで、登録されたフローでのみ必要です)。"

#: ../docs/devices/libraries/mbedcpp.rst:32
msgid "These arguments create definitions which are used to interact with the IoT Platform service."
msgstr ""
"これらの引数は IoT Platform サービスと対話するために使用される定義を作成します。"

#: ../docs/devices/libraries/mbedcpp.rst:34
msgid "The following code block shows how to create a DeviceClient instance to interact with the IoT Platform quickstart service."
msgstr ""
"次のコード・ブロックは、DeviceClient インスタンスを作成して、IoT Platform の Quickstart サービスと対話する方法を示しています。"

#: ../docs/devices/libraries/mbedcpp.rst:58
msgid "As shown above, if the device id is not specified, the DeviceClient uses the MAC address of the device as device id and connects to the IoT Platform. The device code can use getDeviceId() method to retrieve the device id from the DeviceClient instance."
msgstr ""
"前述のとおり、デバイス ID が指定されていない場合、DeviceClient はデバイスの MAC アドレスをデバイス ID として使用して IoT Platform に接続します。デバイス・コードは getDeviceId() メソッドを使用して、DeviceClient インスタンスからデバイス ID を取得できます。"

#: ../docs/devices/libraries/mbedcpp.rst:60
msgid "The following code block shows how to create a DeviceClient instance to interact with the IoT Platform Registered organization."
msgstr ""
"次のコード・ブロックは、DeviceClient インスタンスを作成して、IoT Platform 登録済み組織と対話する方法を示しています。"

#: ../docs/devices/libraries/mbedcpp.rst:82
msgid "Connecting to the IoT Platform"
msgstr ""
"IoT Platform への接続"

#: ../docs/devices/libraries/mbedcpp.rst:84
msgid "The device can connect to the IoT Platform by calling the connect function on the DeviceClient instance."
msgstr ""
"デバイスは DeviceClient インスタンスの接続関数を呼び出すことによって、IoT Platform と接続できます。"

#: ../docs/devices/libraries/mbedcpp.rst:98
msgid "After the successful connection, the device can publish events to the IoT Platform and listen for commands."
msgstr ""
"接続が成功した後で、デバイスはイベントを IoT Platform にパブリッシュして、コマンドを listen できます。"

#: ../docs/devices/libraries/mbedcpp.rst:100
msgid "Also, the device can query the status of the connection using the isConnected() method as follows,"
msgstr ""
"また、デバイスでは、isConnected() メソッドを以下のように使用して接続の状況を照会できます。"

#: ../docs/devices/libraries/mbedcpp.rst:114
msgid "Publishing events"
msgstr ""
"イベントのパブリッシング"

#: ../docs/devices/libraries/mbedcpp.rst:115
msgid "Events are the mechanism by which devices publish data to the IoT Platform. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"イベントは、デバイスが IoT Platform にデータをパブリッシュするためのメカニズムです。デバイスはイベントのコンテンツを制御し、送信するイベントごとに名前を割り当てます。"

#: ../docs/devices/libraries/mbedcpp.rst:117
msgid "When an event is received by the IBM IoT Platform the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""
"IBM IoT Platform は、イベントを受け取ると、そのイベントを受け取った接続の資格情報に基づいて、イベントの送信元のデバイスを特定します。このアーキテクチャーにより、デバイスは別のデバイスの偽名を使用することが不可能になります。"

#: ../docs/devices/libraries/mbedcpp.rst:119
msgid "Events can be published at any of the three `quality of service levels <../messaging/mqtt.html#/>`__ defined by the MQTT protocol.  By default events will be published as qos level 0."
msgstr ""
"イベントは、MQTT プロトコルによって定義された 3 つの `サービスの品質レベル <../messaging/mqtt.html#/>` __ のいずれでもパブリッシュできます。デフォルトで、イベントは qos レベル 0 としてパブリッシュされます。"

#: ../docs/devices/libraries/mbedcpp.rst:122
msgid "Publish event using default quality of service"
msgstr ""
"デフォルトのサービスの品質を使用してイベントをパブリッシュ"

#: ../docs/devices/libraries/mbedcpp.rst:124
msgid "The below sample shows how to publish various data points of LPC1768 like x,y & z axis, joystick position, current temperature reading and etc.. to IoT Platform in JSON format."
msgstr ""
"以下のサンプルは、LPC1768 のさまざまなデータ・ポイント、例えば x、y、および z 軸、ジョイスティックの位置、現在の気温の読み取りなどを IoT Platform に JSON フォーマットでパブリッシュする方法を示します。"

#: ../docs/devices/libraries/mbedcpp.rst:142
#: ../docs/devices/libraries/mbedcpp.rst:238
msgid "The complete sample can be found `here <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/file/e58533b6bc6b/src/Main.cpp>`__."
msgstr ""
"完全なサンプルは、`こちら<https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/file/e58533b6bc6b/src/Main.cpp>`__にあります。"

#: ../docs/devices/libraries/mbedcpp.rst:145
msgid "Publish event using user-defined quality of service"
msgstr ""
"ユーザー定義のサービスの品質を使用してイベントをパブリッシュ"

#: ../docs/devices/libraries/mbedcpp.rst:147
msgid "Events can be published at higher MQTT quality of service levels, but these events may take slower than QoS level 0, because of the extra confirmation of receipt. Also quickstart flow allows only Qos of 0."
msgstr ""
"イベントは、より高レベルな MQTT サービスの品質でパブリッシュできますが、余分な受信の確認があるためこれらのイベントは QoS レベル 0 よりも低速になる可能性があります。また、Quickstart フローでは Qos レベル 0 のみが許可されます。"

#: ../docs/devices/libraries/mbedcpp.rst:169
msgid "Handling the connection lost error during the event publish"
msgstr ""
"イベントのパブリッシュ中に接続が失われた場合の対応"

#: ../docs/devices/libraries/mbedcpp.rst:171
msgid "When the publishEvent() method returns false, one can check the status of the connection and call reConnect() if the connection is lost,"
msgstr ""
"publishEvent() メソッドから false が返された場合は、接続の状況を確認し、接続が失われていれば reConnect() を呼び出します。"

#: ../docs/devices/libraries/mbedcpp.rst:189
msgid "The library does not store the events published during the unconnected state, and hence, the device needs to call the publishEvent() method again to send those events once the connection is reestablished."
msgstr ""
"接続していない状態でパブリッシュしたイベントはライブラリーに格納されていないため、接続が再確立された後に、デバイスから再び publishEvent() メソッドを呼び出してそれらのイベントを送信する必要があります。"

#: ../docs/devices/libraries/mbedcpp.rst:195
msgid "Handling commands"
msgstr ""
"コマンドの処理"

#: ../docs/devices/libraries/mbedcpp.rst:196
msgid "When the device client connects, it automatically subscribes to any commands for this device. To process specific commands you need to register a command callback method. The messages are returned as an instance of the Command class which has the following properties:"
msgstr ""
"デバイス・クライアントは、接続時に自動的にこのデバイスに対するコマンドをサブスクライブします。特定のコマンドを処理するには、コマンド・コールバック・メソッドを登録する必要があります。メッセージは、以下のプロパティーを持つ Command クラスのインスタンスとして返されます。"

#: ../docs/devices/libraries/mbedcpp.rst:199
msgid "command - name of the command invoked"
msgstr ""
"command - 呼び出されるコマンドの名前"

#: ../docs/devices/libraries/mbedcpp.rst:200
msgid "format - e.g json, xml"
msgstr ""
"format - 例: json、xml"

#: ../docs/devices/libraries/mbedcpp.rst:201
msgid "payload"
msgstr ""
"payload"

#: ../docs/devices/libraries/mbedcpp.rst:203
msgid "Following code defines a sample command callback function that processes the LED blink interval command from the application and adds the same to the DeviceClient instance."
msgstr ""
"次のコードは、LED の点滅の間隔コマンドをアプリケーションから処理し、同じものを DeviceClient インスタンスに追加するサンプル・コマンド・コールバック関数を定義するものです。"

#: ../docs/devices/libraries/mbedcpp.rst:240
msgid "The 'client.yield()' function must be called periodically to receive commands."
msgstr ""
"コマンドを受け取るには、'client.yield()' 関数を定期的に呼び出す必要があります。"

#: ../docs/devices/libraries/mbedcpp.rst:245
msgid "Disconnect Client"
msgstr ""
"クライアントの切断"

#: ../docs/devices/libraries/mbedcpp.rst:247
msgid "To disconnect the client and release the connections, run the following code snippet."
msgstr ""
"クライアントを切断して接続を解放するには、次のコード・スニペットを実行します。"

#: ../docs/devices/libraries/mbedcpp.rst:258
msgid "Samples"
msgstr ""
"サンプル"

#: ../docs/devices/libraries/mbedcpp.rst:260
msgid "`IBMIoTClientLibrarySample <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/>`__ - A Sample code that showcases how to use IBMIoTF client library to connect the mbed LPC1768 or FRDM-K64F devices to the IBM Internet of Things Cloud service."
msgstr ""
"`IBMIoTClientLibrarySample <https://developer.mbed.org/teams/IBM_IoT/code/IBMIoTClientLibrarySample/>`__ - IBMIoTF クライアント・ライブラリーを使用して mbed LPC1768 または FRDM-K64F デバイスを IBM Internet of Things Cloud サービスに接続する方法を示すサンプル・コード。"

