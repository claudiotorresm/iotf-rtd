# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, IBM Corporation
# This file is distributed under the same license as the IBM IOT Foundation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: IBM IOT Foundation 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-06-15 21:50-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../docs/applications/libraries/java.rst:2
msgid "Java for Application Developers"
msgstr ""
"アプリケーション開発者用の Java"

#: ../docs/applications/libraries/java.rst:4
msgid "See `iot-java <https://github.com/ibm-messaging/iot-java>`_ in GitHub"
msgstr ""
"GitHub の `iot-java <https://github.com/ibm-messaging/iot-java>`_ を参照してください。"

#: ../docs/applications/libraries/java.rst:7
msgid "Constructor"
msgstr ""
"コンストラクター"

#: ../docs/applications/libraries/java.rst:9
msgid "The constructor builds the client instance, and accepts a Properties object containing the following definitions:"
msgstr ""
"コンストラクターはクライアント・インスタンスを構築し、以下の定義を含むプロパティー・オブジェクトを受け入れます。"

#: ../docs/applications/libraries/java.rst:11
msgid "``org`` - Your organization ID (This is a required field. In case of quickstart flow, provide org as ``quickstart``)."
msgstr ""
"``org`` - 組織 ID (必須フィールドです。Quickstart フローの場合は、org に ``quickstart`` を指定してください。)"

#: ../docs/applications/libraries/java.rst:12
msgid "``id`` - The unique ID of your application within your organization."
msgstr ""
"``id`` - 組織内のアプリケーションの固有 ID。"

#: ../docs/applications/libraries/java.rst:13
msgid "``auth-method`` - Method of authentication (the only value currently supported is ``apikey``)."
msgstr ""
"``auth-method`` - 認証方式 (現在サポートされている値は「apikey」のみ)。"

#: ../docs/applications/libraries/java.rst:14
msgid "``auth-key`` - API key (required if auth-method is ``apikey``)."
msgstr ""
"``auth-key`` - API キー (auth-method が「apikey」である場合に必須)。"

#: ../docs/applications/libraries/java.rst:15
msgid "``auth-token`` - API key token (required if auth-method is ``apikey``)."
msgstr ""
"``auth-token`` - API キー・トークン (auth-method が「apikey」である場合に必須)。"

#: ../docs/applications/libraries/java.rst:16
msgid "``clean-session`` - true or false (required only if you want to connect the application in durable subscription. By default the clean-session is set to true)."
msgstr ""
"``clean-session`` - true または false (永続サブスクリプションでアプリケーションを接続する場合にのみ必須です。clean-session は、デフォルトでは true に設定されます。)"

#: ../docs/applications/libraries/java.rst:17
msgid "``shared-subscription`` - true or false (required only if shared subscription needs to be enabled)."
msgstr ""
"``shared-subscription`` - true または false (共用サブスクリプションを有効にしなければならない場合にのみ必須です。)"

#: ../docs/applications/libraries/java.rst:19
msgid "One must set ``shared-subscription`` to true to build scalable applications which will load balance messages across multiple instances of the application. Refer to the `scalable applications section <https://docs.internetofthings.ibmcloud.com/applications/mqtt.html#/scalable-applications#scalable-applications>`__ for more information about the load balancing."
msgstr ""
"アプリケーションの複数インスタンス間でメッセージのロード・バランシングを実行するスケーラブルなアプリケーションを作成するには、``shared-subscription`` を true に設定する必要があります。ロード・バランシングの詳細については、`スケーラブル・アプリケーションのセクション <https://docs.internetofthings.ibmcloud.com/applications/mqtt.html#/scalable-applications#scalable-applications>`__ を参照してください。"

#: ../docs/applications/libraries/java.rst:21
msgid "The Properties object creates definitions which are used to interact with the IoT Platform module. If no options are provided or organization is provided as quickstart, the client will connect to the IoT Platform Quickstart, and default to an unregistered device."
msgstr ""
"プロパティー・オブジェクトは IoT Platform モジュールと対話するために使用される定義を作成します。オプションを指定しない場合や組織を Quickstart として指定する場合、クライアントは IoT Platform Quickstart に接続して、デフォルトで未登録デバイスになります。"

#: ../docs/applications/libraries/java.rst:23
msgid "The following code snippet shows how to construct the ApplicationClient instance in Quickstart mode,"
msgstr ""
"以下のコード・スニペットは、Quickstart モードで ApplicationClient インスタンスを作成する方法を示しています。"

#: ../docs/applications/libraries/java.rst:36
msgid "The following code snippet shows how to construct the ApplicationClient instance in registered flow,"
msgstr ""
"以下のコード・スニペットは、登録されたフローで ApplicationClient インスタンスを作成する方法を示しています。"

#: ../docs/applications/libraries/java.rst:50
msgid "Using a configuration file"
msgstr ""
"構成ファイルの使用"

#: ../docs/applications/libraries/java.rst:52
msgid "Instead of including a Properties object directly, you can use a configuration file containing the name-value pairs for Properties. If you are using a configuration file containing a Properties object, use the following code format."
msgstr ""
"プロパティー・オブジェクトを直接組み込む代わりに、プロパティーの名前と値のペアを含む構成ファイルを使用できます。プロパティー・オブジェクトを含む構成ファイルを使用する場合、以下のコード形式を使用してください。"

#: ../docs/applications/libraries/java.rst:60
msgid "The application configuration file must be in the following format:"
msgstr ""
"アプリケーション構成ファイルは、以下の形式でなければなりません。"

#: ../docs/applications/libraries/java.rst:77
msgid "Connecting to the IoT Platform"
msgstr ""
"IoT Platform への接続"

#: ../docs/applications/libraries/java.rst:79
msgid "Connect to the Watson IoT Platform by calling the connect function. The connect function takes an optional boolean parameter autoRetr (by default autoRetry is true) that controls allows the library to retry the connection when there is an MqttException. Note that the library won't retry when there is a MqttSecurityException due to incorrect device registration details passed even if the autoRetry is set to true ."
msgstr ""
"接続関数を呼び出して Watson IoT Platform に接続します。接続関数は、オプションのブール値パラメーター autoRetry を取ります (デフォルトでは autoRetry は true です)。このパラメーターにより、MqttException が発生した場合のライブラリーによる接続の再試行を制御および許可します。autoRetry が true に設定されていても、指定されたデバイス登録の詳細が不正確なために MqttSecurityException が発生した場合は、ライブラリーによる再試行は行われないことに注意してください。"

#: ../docs/applications/libraries/java.rst:92
msgid "After the successful connection to the IoT Platform service, the application client can perform the following operations, like subscribing to device events, subscribing to device status, publishing device events and commands."
msgstr ""
"IoT Platform サービスへの接続に成功すると、アプリケーション・クライアントは、デバイス・イベントへのサブスクライブ、デバイス・ステータスへのサブスクライブ、デバイス・イベントやコマンドのパブリッシュなどの操作を実行できます。"

#: ../docs/applications/libraries/java.rst:99
msgid "Subscribing to device events"
msgstr ""
"デバイス・イベントへのサブスクライブ"

#: ../docs/applications/libraries/java.rst:100
msgid "Events are the mechanism by which devices publish data to the IoT Platform. The device controls the content of the event and assigns a name for each event it sends."
msgstr ""
"イベントは、デバイスが IoT Platform にデータをパブリッシュするためのメカニズムです。デバイスはイベントのコンテンツを制御し、送信するイベントごとに名前を割り当てます。"

#: ../docs/applications/libraries/java.rst:102
msgid "When an event is received by the IoT Platform the credentials of the connection on which the event was received are used to determine from which device the event was sent. With this architecture it is impossible for a device to impersonate another device."
msgstr ""
"IoT Platform は、イベントを受け取ると、そのイベントを受け取った接続の資格情報に基づいて、イベントの送信元のデバイスを特定します。このアーキテクチャーにより、デバイスは別のデバイスの偽名を使用することが不可能になります。"

#: ../docs/applications/libraries/java.rst:104
msgid "By default, applications will subscribe to all events from all connected devices. Use the type, id, event and msgFormat parameters to control the scope of the subscription. A single client can support multiple subscriptions. The code samples below give examples of how to subscribe to devices dependent on device type, id, event and msgFormat parameters."
msgstr ""
"デフォルトでは、アプリケーションはすべての接続デバイスの全イベントをサブスクライブします。type、id、event、および msgFormat パラメーターを使用して、サブスクリプションのスコープを制御します。単一のクライアントで複数のサブスクリプションをサポートできます。以下のコード・サンプルは、デバイスの type、id、event、および msgFormat パラメーターに基づいてデバイスをサブスクライブする方法の例を示しています。"

#: ../docs/applications/libraries/java.rst:107
msgid "To subscribe to all events from all devices"
msgstr ""
"すべてのデバイスの全イベントをサブスクライブする場合"

#: ../docs/applications/libraries/java.rst:115
msgid "To subscribe to all events from all devices of a specific type"
msgstr ""
"特定のタイプのすべてのデバイスの全イベントをサブスクライブする場合"

#: ../docs/applications/libraries/java.rst:123
msgid "To subscribe to all events from a specific device"
msgstr ""
"特定のデバイスのすべてのイベントをサブスクライブする場合"

#: ../docs/applications/libraries/java.rst:131
msgid "To subscribe to a specific event from two or more different devices"
msgstr ""
"複数の異なるデバイスの特定のイベントをサブスクライブする場合"

#: ../docs/applications/libraries/java.rst:140
msgid "To subscribe to events published by a device in json format"
msgstr ""
"json 形式でデバイスがパブリッシュしたイベントをサブスクライブする場合"

#: ../docs/applications/libraries/java.rst:152
msgid "Handling events from devices"
msgstr ""
"デバイスのイベントの処理"

#: ../docs/applications/libraries/java.rst:153
msgid "To process the events received by your subscriptions you need to register an event callback method. The messages are returned as an instance of the Event class which has the following properties:"
msgstr ""
"サブスクリプションによって受信したイベントを処理するには、イベント・コールバック・メソッドを登録する必要があります。メッセージは、以下のプロパティーを持つ Event クラスのインスタンスとして返されます。"

#: ../docs/applications/libraries/java.rst:155
msgid "event.device - string (uniquely identifies the device across all types of devices in the organization)"
msgstr ""
"event.device - ストリング (組織内のあらゆるタイプのデバイスを固有に識別)"

#: ../docs/applications/libraries/java.rst:156
msgid "event.deviceType - string"
msgstr ""
"event.deviceType - ストリング"

#: ../docs/applications/libraries/java.rst:157
msgid "event.deviceId - string"
msgstr ""
"event.deviceId - ストリング"

#: ../docs/applications/libraries/java.rst:158
msgid "event.event - string"
msgstr ""
"event.event - ストリング"

#: ../docs/applications/libraries/java.rst:159
msgid "event.format - string"
msgstr ""
"event.format - ストリング"

#: ../docs/applications/libraries/java.rst:160
msgid "event.data - dict"
msgstr ""
"event.data - dict"

#: ../docs/applications/libraries/java.rst:161
msgid "event.timestamp - datetime"
msgstr ""
"event.timestamp - 日時"

#: ../docs/applications/libraries/java.rst:163
msgid "A sample implementation of the Event callback,"
msgstr ""
"Event コールバックのサンプル実装"

#: ../docs/applications/libraries/java.rst:212
msgid "Once the event callback is added to the ApplicationClient, the processEvent() method is invoked whenever any event is published on the subscribed criteria, The following snippet shows how to add the Event call back into ApplicationClient instance,"
msgstr ""
"イベント・コールバックが ApplicationClient に追加された後は、サブスクライブされた基準でイベントがパブリッシュされるたびに、processEvent() メソッドが呼び出されます。以下のスニペットは、Event コールバックを ApplicationClient インスタンスに追加する方法を示しています。"

#: ../docs/applications/libraries/java.rst:220
msgid "Similar to subscribing to device events, the application can subscribe to commands that are sent to the devices. Following code snippet shows how to subscribe to all commands to all the devices in the organization:"
msgstr ""
"デバイス・イベントのサブスクライブと同様に、アプリケーションはデバイスに送信されるコマンドをサブスクライブできます。以下のコード・スニペットは、組織内のすべてのデバイスへすべてのコマンドをサブスクライブする方法を示しています。"

#: ../docs/applications/libraries/java.rst:228
msgid "Overloaded methods are available to control the command subscription. The processCommand() method is called when a command is sent to the device that matches the command subscription."
msgstr ""
"コマンド・サブスクリプションを制御するために、Overloaded メソッドを使用できます。コマンド・サブスクリプションと一致するデバイスにコマンドが送信されると、processCommand() メソッドが呼び出されます。"

#: ../docs/applications/libraries/java.rst:235
msgid "Subscribing to device status"
msgstr ""
"デバイス・ステータスへのサブスクライブ"

#: ../docs/applications/libraries/java.rst:236
msgid "Similar to subscribing to device events, applications can subscribe to device status, like device connect and disconnect to IoT Platform. By default, this will subscribe to status updates for all connected devices. Use the Device Type and Device Id parameters to control the scope of the subscription. A single ApplicationClient can support multiple subscriptions."
msgstr ""
"アプリケーションは、デバイス・イベントをサブスクライブする場合と同様に、デバイス・ステータス (IoT Platform への接続や切断など) をサブスクライブできます。デフォルトで、これはすべての接続デバイスのステータスの更新をサブスクライブします。「デバイス・タイプ」および「デバイス ID」パラメーターを使用して、サブスクリプションのスコープを制御します。単一の ApplicationClient で複数のサブスクリプションをサポートできます。"

#: ../docs/applications/libraries/java.rst:239
msgid "Subscribe to status updates for all devices"
msgstr ""
"すべてのデバイスのステータス更新をサブスクライブ"

#: ../docs/applications/libraries/java.rst:248
msgid "Subscribe to status updates for all devices of a specific type"
msgstr ""
"特定のタイプのすべてのデバイスのステータス更新をサブスクライブ"

#: ../docs/applications/libraries/java.rst:257
msgid "Subscribe to status updates for two different devices"
msgstr ""
"2 つの異なるデバイスのステータス更新をサブスクライブ"

#: ../docs/applications/libraries/java.rst:270
msgid "Handling status updates from devices"
msgstr ""
"デバイスのステータス更新の処理"

#: ../docs/applications/libraries/java.rst:271
msgid "To process the status updates received by your subscriptions you need to register an status event callback method. The messages are returned as an instance of the Status class which contains the below mentioned properties:"
msgstr ""
"サブスクリプションによって受信したステータス更新を処理するには、ステータス・イベント・コールバック・メソッドを登録する必要があります。メッセージは、以下のプロパティーが含まれる Status クラスのインスタンスとして返されます。"

#: ../docs/applications/libraries/java.rst:273
msgid "The following properties are set for both \"Connect\" and \"Disconnect\" status events:"
msgstr ""
"以下のプロパティーは、\"Connect\" と \"Disconnect\" 両方のステータス・イベントで設定されます。"

#: ../docs/applications/libraries/java.rst:275
msgid "status.clientAddr - string"
msgstr ""
"status.clientAddr - ストリング"

#: ../docs/applications/libraries/java.rst:276
msgid "status.protocol - string"
msgstr ""
"status.protocol - ストリング"

#: ../docs/applications/libraries/java.rst:277
msgid "status.clientId - string"
msgstr ""
"status.clientId - ストリング"

#: ../docs/applications/libraries/java.rst:278
msgid "status.user - string"
msgstr ""
"status.user - ストリング"

#: ../docs/applications/libraries/java.rst:279
msgid "status.time - java.util.Date"
msgstr ""
"status.time - java.util.Date"

#: ../docs/applications/libraries/java.rst:280
msgid "status.action - string"
msgstr ""
"status.action - ストリング"

#: ../docs/applications/libraries/java.rst:281
msgid "status.connectTime - java.util.Date"
msgstr ""
"status.connectTime - java.util.Date"

#: ../docs/applications/libraries/java.rst:282
msgid "status.port - integer"
msgstr ""
"status.port - 整数"

#: ../docs/applications/libraries/java.rst:284
msgid "The following properties are only set when the action is \"Disconnect\":"
msgstr ""
"以下のプロパティーは、アクションが \"Disconnect\" である場合にのみ設定されます。"

#: ../docs/applications/libraries/java.rst:286
msgid "status.writeMsg - integer"
msgstr ""
"status.writeMsg - 整数"

#: ../docs/applications/libraries/java.rst:287
msgid "status.readMsg - integer"
msgstr ""
"status.readMsg - 整数"

#: ../docs/applications/libraries/java.rst:288
msgid "status.reason - string"
msgstr ""
"status.reason - ストリング"

#: ../docs/applications/libraries/java.rst:289
msgid "status.readBytes - integer"
msgstr ""
"status.readBytes - 整数"

#: ../docs/applications/libraries/java.rst:290
msgid "status.writeBytes - integer"
msgstr ""
"status.writeBytes - 整数"

#: ../docs/applications/libraries/java.rst:292
msgid "A sample implementation of the Status callback,"
msgstr ""
"Status コールバックのサンプル実装"

#: ../docs/applications/libraries/java.rst:316
msgid "Once the status callback is added to the ApplicationClient, the processDeviceStatus() method is invoked whenever any device is connected or disconnected from IoT Platform that matches the criteria, The following snippet shows how to add the status call back instance into ApplicationClient,"
msgstr ""
"状況コールバックが ApplicationClient に追加された後は、基準に合致する IoT Platform に対してデバイスが接続または切断されるたびに、processDeviceStatus() メソッドが呼び出されます。以下のスニペットは、状況コールバック・インスタンスを ApplicationClient に追加する方法を示しています。"

#: ../docs/applications/libraries/java.rst:325
msgid "As similar to device status, the application can subscribe to any other application connect or disconnect status as well. Following code snippet shows how to subscribe to the application status in the organization:"
msgstr ""
"デバイス状況と同様に、アプリケーションは他のアプリケーションの接続または切断の状況もサブスクライブできます。以下のコード・スニペットは、組織内のアプリケーション状況をサブスクライブする方法を示しています。"

#: ../docs/applications/libraries/java.rst:333
msgid "Overloaded method is available to control the status subscription to a particular application. The processApplicationStatus() method is called whenever any application is connected or disconnected from IoT Platform that matches the criteria."
msgstr ""
"特定のアプリケーションへの状況のサブスクリプションを制御するために、Overloaded メソッドを使用できます。基準に合致するアプリケーションが IoT Platform に接続したり IoT Platform から切断したりするたびに、processApplicationStatus() メソッドが呼び出されます。"

#: ../docs/applications/libraries/java.rst:340
msgid "Publishing events from devices"
msgstr ""
"デバイスのイベントのパブリッシュ"

#: ../docs/applications/libraries/java.rst:341
msgid "Applications can publish events as if they originated from a Device."
msgstr ""
"アプリケーションは、イベントをデバイスから発信されたかのようにパブリッシュできます。"

#: ../docs/applications/libraries/java.rst:358
msgid "Publish events using HTTP(s)"
msgstr ""
"HTTP(s) を使用してイベントをパブリッシュ"

#: ../docs/applications/libraries/java.rst:359
msgid "Apart from MQTT, the application can publish device events to IBM Watson IoT Platform using HTTP(s) by following 3 simple steps,"
msgstr ""
"MQTT とは別に、アプリケーションは以下の 3 つの簡単なステップを実行して、デバイス・イベントを HTTP(s) を使用して IBM Watson IoT Platform にパブリッシュできます。"

#: ../docs/applications/libraries/java.rst:361
msgid "Construct the ApplicationClient instance using the properties file"
msgstr ""
"プロパティー・ファイルを使用した ApplicationClient インスタンスの作成"

#: ../docs/applications/libraries/java.rst:362
msgid "Construct the event that needs to be published"
msgstr ""
"パブリッシュが必要なイベントの作成"

#: ../docs/applications/libraries/java.rst:363
msgid "Specify the event name, Device Type, Device ID and publish the event using publishEventOverHTTP() method as follows,"
msgstr ""
"以下のような、イベント名、デバイス・タイプ、デバイス ID の指定および publishEventOverHTTP() メソッドを使用したイベントのパブリッシュ"

#: ../docs/applications/libraries/java.rst:377
msgid "The complete code can be found in the application example `HttpApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdeviceclient/src/com/ibm/iotf/sample/client/application/HttpApplicationDeviceEventPublish.java>`__"
msgstr ""
"コード全体は、アプリケーション・サンプル `HttpApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-java/blob/master/samples/iotfdeviceclient/src/com/ibm/iotf/sample/client/application/HttpApplicationDeviceEventPublish.java>`__にあります。"

#: ../docs/applications/libraries/java.rst:379
msgid "Based on the settings in the properties file, the publishEventOverHTTP() method either publishes the event in Quickstart or in Registered flow. When the Organization ID mentioned in the properties file is quickstart, publishEventOverHTTP() method publishes the event to IoT Platform quickstart service and publishes the event in plain HTTP format. But when valid registered organization is mentioned in the properties file, this method always publishes the event in HTTPS (HTTP over SSL), so all the communication is secured."
msgstr ""
"プロパティー・ファイルの設定に基づいて、publishEventOverHTTP() メソッドは Quickstart または登録されたフローでイベントをパブリッシュします。プロパティー・ファイルで指定されている組織 ID が Quickstart の場合、publishEventOverHTTP() メソッドは、イベントをプレーン HTTP 形式で IoT Platform の Quickstart サービスにパブリッシュします。しかし、登録されている有効な組織がプロパティー・ファイルで示されている場合、このメソッドはイベントを常に HTTPS (HTTP over SSL) でパブリッシュするため、すべての通信が保護されます。"

#: ../docs/applications/libraries/java.rst:381
msgid "The event in HTTP(s) is published at most once Quality of Service, so the application needs to implement the retry logic when there is an error."
msgstr ""
"HTTP(s) でのイベントは最高 1 回のサービス品質でパブリッシュされるため、アプリケーションはエラーが発生した場合の再試行ロジックを実装する必要があります。"

#: ../docs/applications/libraries/java.rst:388
msgid "Publishing commands to devices"
msgstr ""
"コマンドをデバイスにパブリッシュ"

#: ../docs/applications/libraries/java.rst:389
msgid "Applications can publish commands to connected devices."
msgstr ""
"アプリケーションはコマンドを接続デバイスにパブリッシュできます。"

#: ../docs/applications/libraries/java.rst:408
msgid "Examples"
msgstr ""
"例"

#: ../docs/applications/libraries/java.rst:409
msgid "`MQTTApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/MQTTApplicationDeviceEventPublish.java>`__ - A sample application that shows how to publish device events."
msgstr ""
"`MQTTApplicationDeviceEventPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/MQTTApplicationDeviceEventPublish.java>`__ - デバイス・イベントをパブリッシュする方法を示すサンプル・アプリケーション。"

#: ../docs/applications/libraries/java.rst:410
msgid "`RegisteredApplicationCommandPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationCommandPublish.java>`__ - A sample application that shows how to publish a command to a device."
msgstr ""
"`RegisteredApplicationCommandPublish <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationCommandPublish.java>`__ - コマンドをデバイスにパブリッシュする方法を示すサンプル・アプリケーション。"

#: ../docs/applications/libraries/java.rst:411
msgid "`RegisteredApplicationSubscribeSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationSubscribeSample.java>`__ - A sample application that shows how to subscribe for various events like, device events, device commands, device status and application status."
msgstr ""
"`RegisteredApplicationSubscribeSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/RegisteredApplicationSubscribeSample.java>`__ - デバイス・イベント、デバイス・コマンド、デバイス状況、アプリケーション状況などのさまざまなイベントをサブスクライブする方法を示すサンプル・アプリケーション。"

#: ../docs/applications/libraries/java.rst:412
msgid "`SharedSubscriptionSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/SharedSubscriptionSample.java>`__ - A sample application that shows how to build a scalable application which will load balance messages across multiple instances of the application."
msgstr ""
"`SharedSubscriptionSample <https://github.com/ibm-messaging/iot-application-samples/blob/master/java/standalone-samples/src/main/java/com/ibm/iotf/sample/client/application/SharedSubscriptionSample.java>`__ - アプリケーションの複数インスタンス間でメッセージのロード・バランシングを実行するスケーラブルなアプリケーションを作成する方法を示すサンプル・アプリケーション。"

#: ../docs/applications/libraries/java.rst:413
msgid "`Backup and Restore sample <https://github.com/ibm-messaging/iot-backup-restore-sample>`__ - A sample that shows how to backup the device configuration in Cloudant NoSQL DB and restore the same later."
msgstr ""
"`バックアップとリストアのサンプル <https://github.com/ibm-messaging/iot-backup-restore-sample>`__ - Cloudant NoSQL DB にデバイス構成をバックアップし、それと同じものを後でリストアする方法を示すサンプル。"

